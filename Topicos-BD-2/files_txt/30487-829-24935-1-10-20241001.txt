LightningBR: Ferramenta Web para Visualização e Análise de
Ocorrência de Raios no Brasil
Elton R. Alves
Warley M. V. Júnior
eltonalves@unifesspa.edu.br
wmvj@unifesspa.edu.br
Universidade Federal do Sul e Sudeste
do Pará
Alife S. de Moraes
Diogo da S. Alvino
alife.silva@unifesspa.edu.br
diogo.alvino@unifesspa.edu.br
Universidade Federal do Sul e Sudeste
do Pará
Andson M. Balieiro
amb4@cin.ufpe.br
Universidade Federal de Pernambuco
WFA’2024, Juiz de Fora/MG, Brazil
Elton R. Alves et al.
Este artigo está organizado da seguinte forma: A Seção 2 descreve
a arquitetura geral da aplicação e detalhes das camadas de front-end
e back-end. Na Seção 3 são apresentados os principais resultados
relacionados as funcionalidade da ferramenta. Por fim, a conclusão
e trabalhos futuros são apresentados na Seção 4.
A FERRAMENTA WEB LIGHTNINGBR
Nesta seção, detalha-se a arquitetura geral da ferramenta, descre-
vendo cada um dos componentes desenvolvidos, bem como a inte-
ração entre eles.
2.1
Arquitetura Geral
A Figura 1 exibe a estrutura geral do sistema proposto, demons-
trando um fluxo adequado para o tratamento dos dados, de modo
que os usuários possam acessar as funcionalidades que incluem
um sistema de filtragem, importação de arquivos, mapa e gráficos
dinâmicos por meio da interface.
Figura 1: Arquitetura Geral.
Conforme ilustrado pela Figura 1, os dados que alimentam o
sistema são obtidos através da Earth Networks - Sferic Maps (Etapa
1) [2], sendo disponibilizados em formato .csv (Comma Separated
Values). A Etapa 2 envolve a conversão desses arquivos CSV para o
formato JSON (JavaScript Object Notation) para ser compreendido
pelo banco de dados. Uma vez que os dados são transformados
em formato JSON, dá-se início ao processo da Etapa 3, ou seja, a
interface da camada de front-end oferece uma funcionalidade de
importação, o que permite a inclusão dos dados no banco de dados
por meio de um campo incorporado na tela.
Antes da inserção no banco de dados, os dados passam por uma
breve validação em nível de código (Etapa 4) para garantir que
as chaves e valores estejam formatados corretamente. Se a vali-
dação ocorrer sem problemas e nenhuma anomalia for detectada
na estrutura do arquivo JSON, os dados são inseridos (Etapa 5). É
importante observar que, se os arquivos já tiverem sido adicionados
anteriormente, o sistema notificará o usuário de que informações
semelhantes já foram incluídas.
Uma vez que os dados estão no banco de dados, é estabelecido
um relacionamento com a API (Application Programming Interface)
de mapas (Etapa 6). Isso é realizado por meio de um ambiente de
execução baseado em JavaScript no lado do servidor (JavaScript
Server-Side) na Etapa 4. O servidor carrega as informações do banco
de dados e as armazena em uma variável temporária que pode
ser acessada por todas as rotas da aplicação. A API de mapas é
uma biblioteca que é chamada na camada de front-end e possibilita
a geração de um mapa geográfico, o qual é exibido em uma das
páginas da aplicação. As propriedades da variável temporária, como
latitude e longitude, são usadas por esta API para personalizar tanto
a exibição dos marcadores no mapa quanto a clusterização destes,
conforme sugerido na documentação da API [1].
Neste cenário, outra funcionalidade foi desenvolvida com base
na interação entre o servidor e o banco de dados (Etapa 4). Tal
funcionalidade trata-se de um sistema de filtragem dinâmica que,
através de uma série de campos interativos na camada do front-
end (Etapa 3), permite aos usuários manipular e explorar os dados
previamente incluídos no banco. Isso possibilita análises específicas,
como a contagem de ocorrências de raios por mês, classificação por
tipo de raio, seleção de um intervalo inicial e final de dias no ano e
filtragem por quantidade de ocorrência.
Após a aplicação da filtragem, o sistema retorna a quantidade
de raios que atendem aos critérios especificados, e cada raio é re-
presentado no mapa por marcadores que facilitam a visualização
geográfica das ocorrências.
2.2
Camada Back-End
A camada back-end tem papel fundamental na ferramenta, pois ela é
constituída pelo banco de dados, um servidor, a API de mapas e pela
comunicação entre esses três componentes, além de conter as fun-
cionalidades desenvolvidas a nível de código, que são transmitidas
para a interface.
2.2.1
Modelo de Dados. O banco de dados da ferramenta proposta
armazena as informações vinda do campo de inserção na camada do
front-end. A entidade tem os atributos que constituem em informa-
ções usadas tanto nas filtragens dinâmicas, nos gráficos dinâmicos,
quanto nos marcadores no mapa da API. A partir do exposto, os
atributos do modelo de dados são descritos conforme:
• id (PK): É um atributo numérico que representa a chave
primária da tabela, cujo propósito é garantir que cada dado
inserido tenha um identificador único controlado automa-
ticamente pelo SGBD (Sistema Gerenciador de Banco de
Dados).
• time_utc: É o atributo que contem informações temporais
de ocorrência da descarga atmosférica, tais como dia, hora,
minutos e segundos.
• type: É um atributo categórico-nominal referente ao tipo do
descarga atmosférica.
• latitude: Este atributo é responsável por armazenada a lati-
tude geográfica, que é a distância angular medida em graus
entre qualquer ponto na superfície terrestre e a Linha do
Equador, sendo essencial para localizar e mapear pontos no
planeta.
• longitude: Este atributo é medido em graus, porém em rela-
ção ao meridiano de Greenwich. O sistema de coordenadas
formado por latitude e longitude é amplamente utilizado
para identificar a localização precisa de pontos na Terra.
• pear_current: Este atributo refere-se ao valor máximo da
corrente elétrica gerada durante um raio.
• ic_height: É um atributo relacionado a altura em que foi
detectada a ocorrência do raio.
LightningBR: Ferramenta Web para Visualização e Análise de Ocorrência de Raios no Brasil
WFA’2024, Juiz de Fora/MG, Brazil
• number_of_sensors: Este atributo está relacionado ao nú-
mero de sensores que captou a ocorrência do raio.
2.2.2
API de mapas. A API de mapas tem o objetivo de fornecer
além do próprio mapa geográfico, os marcadores de cada ocorrência
de raio. Além disso, com algumas bibliotecas importadas dessa
API, ela pode proporcionar o desenvolvimento de clusterização
dos marcadores no mapa. Dessa forma, ao filtrar uma quantidade
grande de pontos na tela, essa funcionalidade serve para agrupar os
marcadores próximos, melhorando o desempenho da ferramenta.
2.3
Front-end
O ambiente front-end refere-se à parte onde os usuários finais veem
e interagem diretamente com a aplicação. Em vista disso, criar um
cenário para que o usuário possa ter uma boa experiência com a
ferramenta torna-se algo de grande importância. Das ferramentas
usadas para alcançar um ambiente adequado, foi feito o uso de
HTML. Além de ser a linguagem de marcação mais amplamente
utilizada, o HTML é considerado o padrão da internet, o que signi-
fica que ele estabelece as diretrizes e as regras fundamentais para a
criação e a formatação de aplicações web.
A principal linguagem de programação usada neste projeto foi
o JavaScript. Isso ocorre porque, quando uma página web exibe
informações além de estáticas, como conteúdo que se renova pe-
riodicamente, sistemas de filtragem, gráficos e mapas dinâmicos,
a linguagem JavaScript está presente por trás de toda a lógica,
fornecendo esse suporte por meio de APIs, bibliotecas e pacotes.
O projeto inclui uma API em JavaScript chamada Leaflet. É uma
API de mapas de código aberto amplamente empregada na constru-
ção de mapas interativos para websites. Ela oferece uma estrutura
ágil e adaptável para integrar mapas interativos em aplicações da
web por meio das tecnologias HTML, CSS e JavaScript. Além disso,
essa API de mapa tem uma excelente interatividade, que vai desde
um evento de clique ou zoom até funcionalidades como a clusteriza-
ção dos marcadores no mapa, que por sua vez se caracteriza como
uma técnica usada para agrupar marcadores que estão próximos
uns dos outros. Isso é especialmente útil quando há muitos pontos
no mapa, evitando a poluição visual e tornando a visualização mais
clara e organizada.
2.4
Plataforma Web
A Figura 2 demonstra a interface gráfica para que o usuário possa
realizar filtragens de ocorrência de raios 3, 4 . Esta prototipagem
foi realizada através da ferramenta Figma5. Essa primeira página
caracteriza-se por um menu lateral com campos usados para realizar
análises por meio de filtragem, um campo para inserção de um
arquivo JSON e um botão localizado na parte inferior que leva à
página de gráficos. Ao lado, encontra-se o mapa geográfico. Quando
a funcionalidade dos filtros for acionada, os pontos retornados serão
exibidos como marcadores no mapa e a quantidade desses pontos
será mostrada na parte inferior do menu lateral. Na plataforma web,
há exemplos de arquivos JSON que o usuário pode fazer download
e upload.
3Disponível em: https://lightmab.onrender.com/mapa.html
4O funcionamento pode ser visto em: https://youtu.be/EmnUSG94CcA
5Disponível em: https://www.figma.com
Figura 2: Interface da primeira página
Outra funcionalidade presente na ferramenta é a possibilidade
de análise estatística por meio de gráficos dinâmicos. A Figura
3 demonstra esta funcionalidade, onde o usuário poderá analisar
melhor o quantitativo de cada tipo de raio. É possível selecionar o
mês desejado e o gráfico ao lado evidenciará as informações sobre as
ocorrências de raios nesse mês escolhido. Por fim, na parte inferior
do menu, há um botão que permite retornar para a página onde se
encontra o mapa geográfico.
Figura 3: Interface da segunda página
ANÁLISE E DISCUSSÃO DOS RESULTADOS
Nesta seção serão mostrados resultados obtidos com a ferramenta
web. Os resultados serão exibidos para uma cidade do Brasil. Es-
ses resultados mostram algumas das principais funcionalidades do
sistema desenvolvido.
3.1
Filtragem por Mês
A Figura 4 ilustra uma filtragem realizada para um mês específico,
sem especificação do tipo de raio. Neste caso, o sistema mostrou
na parte inferior do menu o quantitativo dos pontos retornados.
No mapa, por sua vez, foram exibidos os marcadores, ou seja, os
pontos relacionados ao local exato de cada ocorrência.
É importante ressaltar que a ferramenta possui a funcionalidade
de clusterização dos marcadores, que é uma forma para otimizar a
experiência do usuário e não deixar o mapa poluído com inúmeros
marcadores. Isto é, caso vários pontos estejam próximos, o mapa
apresenta um determinado perímetro com a borda em azul com
WFA’2024, Juiz de Fora/MG, Brazil
Elton R. Alves et al.
um círculo laranja mostrando o número total de marcadores que
contém neste perímetro, de maneira que, quanto mais o usuário se
aproximar do chão, mais grupos serão mostrados, até que o zoom
esteja tão ampliado que seja possível ver apenas um marcador na
tela. Outrora, quanto menos ampliado estiver o zoom, os números de
grupos irão diminuir, de forma que no mapa, permaneça apenas um
único grupo clusterizado, contendo todos os marcadores referente
a filtragem feita.
Figura 4: Filtragem raios por mês.
Além disso, no mapa, é possível perceber que há áreas mais
afetadas do que outras, a coloração mais avermelhada significa que
há muitos marcadores, ou seja, que se trata de uma região com
ocorrências de raios bastante elevada, analogamente as regiões com
a coloração azul quase transparentes informam um local afetado
com menos ocorrências.
3.2
Filtragem por Mês e por tipo de Raio
A Figura 5 exibe uma filtragem de todas as ocorrências de um deter-
minado tipo de raio (IN) para um mês específico. Nessa filtragem, o
usuário pode escolher qual o tipo de raio será exibido, ou seja, NS
ou IN.
Figura 5: Filtragem por Mês Limitado a um Tipo de Raio.
3.3
Gráficos Dinâmicos
No menu lateral, na página onde se encontra o mapa mostrado
na Figura 7, há um botão na parte inferior destacado em azul. Ao
clicar, o usuário será redirecionado para outra página do sistema,
onde encontrará um gráfico dinâmico empilhado correspondente às
ocorrências de raios de cada mês, representadas por cores diferentes,
como demonstrado na Figura 6.
Figura 6: Gráfico Dinâmico Empilhado.
Esta funcionalidade é importante, pois permite ao usuário reali-
zar análises estatísticas de ocorrência de raios para uma determi-
nada região. Outras funcionalidades que podem ser realizadas são:
filtragem por mês limitado a quantidade de raios e filtragem por mês
limitado em certo período de dias. Ressalta-se que a ferramenta de-
senvolvida não requer nenhum tipo de licença para uso acadêmico
e social. Caso o usuário, em sua localidade, não disponha de dados
da ENTLN, ele poderá entrar em contato para a disponibilização
no formato JSON para inseri-los na ferramenta.
CONSIDERAÇÕES FINAIS
Este trabalho apresentou o desenvolvimento e as funcionalidades
de um sistema web que permite o monitoramento de ocorrência
de raios IN e NS, a partir dos dados da ETLN. A construção da
ferramenta web foi dividida em duas partes, sendo a primeira o
back-end e a segunda o front-end.
A partir das principais funcionalidades apresentadas, a ferra-
menta web mostrou potencial para a realização de estudos sobre
regiões mais afetadas pela ocorrência de determinados tipos de raio.
Isso pode levar à mitigação dos danos causados pelos raios. Essa
análise é viabilizada pela funcionalidade de clusterização dos pontos
de raios gerados. Ressalta-se que as funcionalidades apresentadas
podem ser combinadas, tornando as filtragens mais criteriosas.
A ferramenta web ainda não consegue realizar um monitora-
mento em tempo real, pois não está ligada aos sensores da ETLN.
Outra limitação é que os dados JSON precisam ser disponilizados na
plataforma para serem baixados e importados na ferramenta, caso
o usuário não disponha de dados da ETLN em sua região. Assim,
como trabalhos futuros, destaca-se, vincular a ferramenta web a
um sensor que a alimente automaticamente quando captar um raio,
mostrando em tempo real as ocorrências de raios NS e IN para
qualquer localidade do Brasil. Além disso, pretende-se desenvolver
um algoritmo de predição de ocorrências de raios em tempo real
na plataforma.
