Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida
Laurentino Augusto Dantas, laurentino.dantas@ifms.edu.br
Instituto Federal de Mato Grosso do Sul, Naviraí, MS
Joab Cavalcante da Silva, joab@uems.br
Universidade Estadual de Mato Grosso do Sul, Naviraí, MS
Maria da Graça C. Pimentel, mgp@icmc.usp.br, Universidade de São Paulo, São Carlos, SP, 2022

The results revealed various approaches and techniques employed in the implementation of RTCEs, offering a comprehensive view of research in this area. This, in turn, allowed for the identification of challenges that future research should address.
WRSL+’2024, Juiz de Fora/MG, Brasil, Dantas et al.
Abordagens e desafios na colaboração em tempo real de modo geral, e na construção de sistemas apoio à colaboração de modo particular.

Diante da relevância e da atualidade desse tema, o presente trabalho se propõe a realizar uma revisão sistemática da literatura, com o objetivo de elucidar aspectos cruciais no desenvolvimento de editores colaborativos em tempo real (RCE). Esse esforço está alinhado a vários tópicos de interesse do WebMedia, inclusive “autoria e anotação” e “interação multiusuário.”
Assim, apresentamos uma Revisão Rápida (RR) para identificar, de maneira objetiva, sistemática e reprodutível, os trabalhos relevantes sobre o tema. As Revisões Rápidas utilizam métodos abreviados em comparação com as revisões sistemáticas padrão para acelerar o processo de tomada de decisão [57], mas mantêm um caráter sistemático [50]. Seguindo as melhores práticas para RR [16], inicialmente foi definido um protocolo PRISMA2 para especificar os passos e os resultados esperados da pesquisa.
Um dos motivos de classificarmos nosso trabalho como uma Revisão Rápida é o fato de utilizarmos a indexação realizada pela ACM Digital Library para acessar os registros de trabalhos da área de computação disponibilizados em outras bases de dados. O outro motivo é que aplicamos a string de busca para a seleção dos artigos nos títulos e nos resumos dos registros, e não no texto do artigo como um todo.

O restante deste texto está organizado como segue. A Seção 2 apresenta uma compilação de conceitos importantes para o desenvolvimento de editores colaborativos em tempo real. A Seção 3 detalha o protocolo adotado na revisão bem como o processo de seleção dos estudos. A Seção 4 apresenta os resultados obtidos relativamente às questões de pesquisa e um resumo dos estudos analisados relativamente às questões. A Seção 5 identifica riscos à validade dos resultados da revisão. A Seção 6 discute desafios de pesquisa associados aos resultados obtidos. A Seção 7 sumariza o trabalho reportado neste estudo.

EDITORES COLABORATIVOS EM TEMPO REAL (RCE)
Editores colaborativos em tempo real, ou Real-Time Collaborative

Editors (RCEs), são ferramentas de software que permitem a múltiplos usuários trabalharem simultaneamente em um mesmo documento, independentemente de suas localizações geográficas. Esses editores oferecem uma interface onde um grupo de usuários pode visualizar e editar o mesmo documento em tempo real, com todas as alterações sendo propagadas e exibidas instantaneamente para todos os participantes [5].
O processo de edição colaborativa é complexo e envolve múltiplas considerações [22, 36]. A principal delas é a manutenção da
sincronização entre diversas cópias do documento editadas simultaneamente por usuários distintos. É essencial que os sistemas de RCE integrem camadas de controle de acesso para garantir responsividade e consistência, sem introduzir cargas excessivas. Além disso, deve-se assegurar que todos os usuários vejam a versão atualizada do documento compartilhado [7].
Os RCEs são amplamente utilizados em ambientes como desenvolvimento de software, educação e colaboração em documentos.
Eles suportam a edição de uma variedade de tipos de conteúdo, 2https://www.prisma-statement.org/prisma-2020-statement
incluindo texto, imagens [5], objetos JSON [27], documentos PDF
[28] e objetos 3D [49], entre outros.
Para funcionar eficazmente, um RCE deve atender a vários requisitos comuns, de acordo com Cherif [7]:
• Alta responsividade local: O sistema deve ter uma performance comparável àquelas de editores de usuário único [14, 61, 63];
• Alta concorrência: O sistema deve permitir que os usuários modifiquem simultaneamente qualquer parte do documento [14, 61];
• Consistência: Todos os usuários devem eventualmente visualizar uma versão convergente do documento [14, 61];
• Coordenação descentralizada: Atualizações concorrentes devem ser sincronizadas de forma descentralizada para evitar pontos únicos de falha [14, 61];
• Escalabilidade do número de usuários: O sistema deve suportar um número dinâmico de usuários, permitindo que se juntem ou saiam do grupo a qualquer momento [23]. Os algoritmos de RCE que suportam esses requisitos são geralmente classificados em dois grupos [2]:
• Algoritmos centralizados: Esses algoritmos exigem um servidor central para coordenar as atualizações do documento, gerenciando a concorrência e a ordem das operações. Exemplos incluem SOCT4 [69], GOT [61], e Jupiter [40].
• Algoritmos descentralizados: Esses algoritmos permitem que as atualizações sejam executadas em qualquer ordem, sem a necessidade de um servidor central. Exemplos incluem adOPTed [48] e SOCT2 [59].
Além de permitir a edição simultânea e visualização em tempo real das alterações, muitos RCEs oferecem recursos adicionais, e.g.:
• Histórico de alterações: Registra a sequência de operações e os usuários envolvidos [17];
• Comunicação em tempo real: Inclui recursos como chat para facilitar a comunicação durante a edição [17];
• Desfazer e Refazer (undo/redo): Permite reverter ações realizadas [20];
• Comentários: Possibilita a inserção de notas em partes específicas do documento [28]. Atualmente, existem diversos RCEs disponíveis na web, incluindo:
• Google Docs: Plataforma para edição colaborativa de documentos, planilhas e apresentações com recursos de histórico de versões e comentários;
• Microsoft Office Online: Versões online do Word, Excel e PowerPoint com funcionalidades colaborativas;
• Notion: Ferramenta que combina notas, tarefas, wikis e bases de dados com colaboração em tempo real;
• Visual Studio Code com Live Share: Permite edição colaborativa de código com colaboração simultânea em projetos;
• Overleaf : Plataforma para edição colaborativa de documentos LaTeX, amplamente utilizada no meio acadêmico.
Conforme Gadea [19], o design e a implementação de algoritmos de controle de consistência otimista apresentam desafios significativos. Ao longo de mais de três décadas de pesquisa em coedição, Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil surgiram duas principais abordagens para o controle de consistência otimista: Transformações Operacionais (OT) e Tipos de Dados Replicados Comutativos (CmRDTs).
Transformações Operacionais (OT) utilizam transformações que preservam a intenção das operações em ambientes colaborativos, mesmo diante de concorrência. O primeiro algoritmo de OT foi introduzido por Ellis and Gibbs [14] e era baseado em uma abordagem ponto-a-ponto. Por outro lado, Oster et al. [43] propuseram os CmRDTs, que utilizam estruturas de dados projetadas para garantir
a comutatividade das operações, eliminando a necessidade de transformações [53]. Os CmRDTs baseiam-se em operações posicionais
e são projetados para garantir a consistência sem conflitos [52].
Sun et al. [62, 64] analisaram e compararam as duas estratégias, e detalham as vantagens de OT em relação CRDT.

REVISÃO RÁPIDA
3.1 - Protocolo da revisão
Foi definido como protocolo de trabalho para esta pesquisa, o método denominado Revisão Rápida (RR) [16, 50] utilizando a base de
dados indexada pela ACM e dividindo a seleção e a análise entre dois avaliadores apoiados por uma pessoa árbitra de conflitos. Para análise dos estudos, foram selecionados trabalhos que descrevessem o desenvolvimento de sistemas com suporte a RTCE, incluindo trabalhos que descrevessem a implementação de um RCE. Também foram analisados trabalhos que, mesmo que não apresentassem a implementação de um RCE, descrevessem algoritmos ou técnicas importantes para o seu desenvolvimento.
3.1.1 - Fatores PICO.
Conforme descrito por Moher et al. [37], no contexto de uma revisão sistemática, critérios de elegibilidade são os critérios pré-definidos que formam a base para a definição de uma boa questão de pesquisa. Esses critérios incluem fatores como o tipo de população alvo estudada (P), a intervenção realizada ou tratamento aplicado (I), a comparação com outras intervenções (C), e os desfechos de interesse ou resultados esperados (O). De acordo com Shin et al. [55], o termo intervenção, no caso de revisão sistemática na área de computação, corresponde à inovação investigada pela pesquisa relatada no artigo analisado. P (População/Problema): Tipos de objetos editáveis, arquiteturas de sistemas RTCE, tipos de diagramas usados, modelos e roteiros
para desenvolvimento, algoritmos de sincronização OT e CRDT, tipos de testes realizados, técnicas de undo/redo, e utilização de
comentários, chat ou histórico.
I (Intervenção): Sistemas RTCE, implementação de sistemas RTCE, representação de editores colaborativos, desenvolvimento de sistemas RTCE, algoritmos de OT e CRDT, e técnicas de undo/redo.
C (Comparação): Comparação entre diferentes tipos de objetos, arquiteturas, modelos ou roteiros, algoritmos de OT e CRDT, tipos
de testes, e técnicas de undo/redo.
O (Resultado): Tipos de objetos editáveis, arquitetura mais utilizada e modelos para desenvolvimento, principais tipos de diagramas utilizados, frequência de algoritmos de OT e CRDT, tipos e número de testes realizados, discussões sobre técnicas de undo/redo, e uso de ferramentas de apoio ao trabalho colaborativo.
3.1.2 - Objetivos e Questões de Pesquisa.
Utilizamos os fatores PICO para definir as questões de pesquisa.
QP1. Para edição de quais tipos de objetos a literatura apresenta sistemas RTCE?
QP2. Qual a arquitetura mais utilizada pelos pesquisadores para implementar sistemas RTCE , como eles são representados
e quais trabalhos apresentam modelos ou roteiros para o desenvolvimento de RCEs?
QP3. Entre os algoritmos OT e CRDT, qual o que aparece com mais frequência nos trabalhos selecionados?
QP4. Quais os principais tipos de testes realizados para avaliar os editores colaborativos, quais os artigos realizaram testes com usuários e qual o número médio de usuários que realizaram os testes?
QP5. Quais trabalhos discutem técnicas de undo/redo?
QP6. Quais trabalhos discutem a utilização dos comentários, chat ou histórico como ferramentas de apoio ao trabalho colaborativo?
A seguir, detalhamos os aspectos específicos que buscamos investigar em nossa revisão.
QP1. Para edição de quais tipos de objetos a literatura apresenta sistemas RTCE? Buscamos identificar os tipos de objetos que são
alvo de edições em tempo real nos sistemas colaborativos, como texto, código-fonte, gráficos, multimídia, entre outros.
QP2. Qual a arquitetura mais utilizada pelos pesquisadores para implementar sistemas RTCE, como eles são representados e quais trabalhos apresentam modelos ou roteiros para o desenvolvimento de RCEs? Analisamos quais arquiteturas são preferidas para a implementação de sistemas RTCE, como cliente-servidor, peer-to-peer, entre outras. Investigamos também como essas arquiteturas são representadas nos artigos e quais deles fornecem modelos ou roteiros detalhados para o desenvolvimento de editores colaborativos.
QP3. Entre os algoritmos OT e CRDT, qual o que aparece com mais frequência nos trabalhos selecionados? Verificamos a frequência de uso dos algoritmos de Transformação Operacional (OT) e Tipos de Dados Replicados sem Conflitos (CRDT) nos artigos, identificando qual deles é mais recorrente e em quais contextos são aplicados.
QP4. Quais os principais tipos de testes realizados para avaliar os editores colaborativos, quais os artigos realizaram testes com usuários e qual o número médio de usuários que realizaram os testes? Examinamos os tipos de testes empregados para avaliar a eficácia dos editores colaborativos, distinguindo entre testes de desempenho, usabilidade, robustez, entre outros. Procuramos identificar artigos que realizaram testes com usuários e a média de participantes envolvidos nesses estudos.
QP5. Quais trabalhos discutem técnicas de undo/redo? Investigamos quais artigos abordam a implementação de técnicas de desfazer/refazer (undo/redo) nos editores colaborativos, destacando as abordagens utilizadas e os desafios enfrentados.
QP6. Quais trabalhos discutem a utilização dos comentários, chat ou histórico como ferramentas de apoio ao trabalho colaborativo?
Analisamos artigos que discutem a integração de funcionalidades WRSL+’2024, Juiz de Fora/MG, Brasil Dantas et al.
como comentários, chat e histórico nos editores colaborativos, avaliando como essas ferramentas contribuem para a eficácia do trabalho colaborativo.
Essas questões de pesquisa nos orientaram a focar nos aspectos mais relevantes e recorrentes do desenvolvimento de editores colaborativos em tempo real, garantindo uma análise abrangente e detalhada das práticas, algoritmos e inovações documentadas na literatura. Através dessas perguntas, buscamos compreender as metodologias e tecnologias envolvidas no desenvolvimento de sistemas RTCE.
Além disso, este estudo também se interessa em entender como se dá o processo de desfazer e refazer em sistemas colaborativos em tempo real, assim como em examinar como a literatura aborda os recursos de histórico, comentários e chat nesses sistemas, que muitas vezes são utilizados como suporte ao trabalho colaborativo.
3.1.3 - Critérios de elegibilidade.
Apresentamos os critérios de inclusão dos estudos com base nos fatores PICO utilizados na definição da questão de pesquisa.
Population (P): Devem ser incluídos artigos que reportam modelos, algoritmos, técnicas ou formas de desenvolver editores colaborativos em tempo real, bem como aqueles que discutem formas originais ou customizadas para implementar recursos como histórico, desfazer/refazer, chat, comentários, etc.
Intervention (I): Devem ser incluídos artigos que apresentam novos editores colaborativos em tempo real, novas formas de implementação desses editores, ou novos recursos que possam ser aplicados aos mesmos, além de formas inovadoras de implementar esses recursos.
Comparison (C): Devem ser incluídos artigos que explicitam o desenvolvimento de editores colaborativos em tempo real, algoritmos e técnicas utilizados, implementação de novos recursos e novas formas de implementá-los. Preferencialmente, artigos que apresentam as avaliações realizadas e os dispositivos empregados.
Outcome (O): Devem ser incluídos artigos que explicitam técnicas, algoritmos, arquiteturas ou modelos empregados no desenvolvimento de editores colaborativos em tempo real, dando preferência àqueles que apresentam testes e resultados obtidos.
3.1.4 - String de busca.
Considerando que as palavras necessárias ao estudo são comuns e utilizadas com frequência no texto acadêmico, restringimos a consulta ao resumo e ao título dos trabalhos. Portanto, a string de busca foi criada a identificar, no 2024. Como resultado, foram obtidos 370 registros, dos quais 5 (cinco) foram identificados como duplicados e removidos.
Uma verificação dos 365 registros obtidos depois da eliminação das duplicatas permitiu identificar as editoras responsáveis pela publicação dos trabalhos: ACM (162), IEEE (64), Springer-Verlag (41), Elsevier (12), Kluwer (7), Addison-Wesley (5), e os 74 trabalhos restantes foram publicados por outras editoras como Microsoft Press e Australian Computer Society.
A Figura 2 mostra a distribuição do ano de publicação dos 365 artigos.
Nota-se que o período de maior ocorrência foi entre 2010 e 2017 e que, nos últimos cinco anos, o número de registros está entre quatro e dez por ano.
Utilizamos a ferramenta Rayyan5 para apoiar a triagem de artigos e a extração de dados.
3.2.2 - Seleção. Considerando os critérios de elegibilidade enumerados na Seção 3.1.3, a triagem correspondente à leitura dos títulos e dos resumos foi realizada paralelamente por dois pesquisadores, que avaliaram todos os registros.
A análise foi conduzida em modo cego, de forma que cada pesquisador realizou sua análise sem tomar conhecimento da decisão do outro. Ao final dessa etapa, o modo cego foi desativado. As divergências entre as classificações dos revisores foram arbitradas por uma terceira pessoa revisora. Do total de 365 trabalhos, foram selecionados 65 artigos completos.
Embora todos os tipos de materiais tenham sido analisados, a fase de análise resultou na seleção exclusivamente de artigos completos.
3.2.3 - Elegibilidade. Na etapa de elegibilidade, dois pesquisadores fizeram a leitura completa de cada artigo e os classificaram de acordo com os critérios de elegibilidade. A seguir, as divergências foram sanadas pela terceira pessoa revisora. Além disso, nesta etapa foi possível identificar a língua utilizada nos artigos, e foram considerados artigos em inglês ou português.
3.2.4 - Inclusão. Ao final foram identificados 23 artigos que atendiam aos critérios de elegibilidade. A Figura 3 apresenta a distribuição dos estudos ao longo do período entre 2002 e 2021, sendo que 2012 apresenta o maior número de publicações (4).
Uma síntese da análise desses 23 artigos, relativamente às questões de pesquisa, é apresentada na Seção 4.1. O resumo de cada um dos artigos é apresentado na Seção 4.2.
https://libraries.acm.org/digital-library/acm-guide-to-computing-literature
Observamos que a consulta realizada na data de conclusão deste manuscrito (27/08/2024), utilizando a URL informada, retorna 381 registros.
https://rayyan.ai/
Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil
Figura 1: Síntese da estratégia de identificação dos estudos.
Figura 2: Distribuição dos 365 registros retornados por ano.

RESULTADOS
4.1 - Síntese das respostas às questões da RR
A etapa de análise de cada artigo permitiu extrair as respostas às questões de pesquisa, sumarizadas nesta seção.
A Tabela 1 sumariza o tipo de objeto editado, de arquitetura utilizada, de algoritmo de sincronização adotado, bem como se o editor foi desenvolvido ou não como uma aplicação Web. A Figura 4 apresenta graficamente os resultados descritos na Tabela 1.
A Tabela 2 indica quais trabalhos contemplaram testes de modo geral, e os que realizaram testes com usuários. A Figura 5 apresenta graficamente os trabalhos que executaram testes.
A Tabela 3 especifica quais trabalhos oferecem quais recursos de edição.
A Figura 6 apresenta os totais referentes aos trabalhos que exploraram os recursos de undo/redo, chat, histórico e comentários.
Figura 3: Distribuição dos 23 artigos selecionados por ano.
Para edição de quais tipos de objetos a literatura apresenta sistemas RTCE?
A análise dos estudos identificou editores para os seguintes tipos de objeto:
texto [3, 31, 32, 39, 54, 71, 73], imagens [5] [20] [49], páginas web [24, 44, 45], diagramas UML [12, 66], modelos de recursos [30], modelo de software [41], objetos JSON [27], dados geográficos [17], documentos PDF [28], e documentos XML [72].
Qual a arquitetura mais utilizada pelos pesquisadores para implementar sistemas RTCE , como eles são representados e quais trabalhos apresentam modelos ou roteiros para o desenvolvimento de RCEs?
A arquitetura predominante nos trabalhos analisados foi a cliente-servidor, presente em 18 dos 23 estudos, o que representa 75% do total.
WRSL+’2024, Juiz de Fora/MG, Brasil Dantas et al.
Tabela 1: Objeto editado, arquitetura empregada, algoritmos de sincronização (se informados) e plataforma web
Referência Tipo de objeto editado
Arquitetura OT / CRDT
Web Bath et al. [5]
Raster e Vetor de imagem Cliente-Servidor
OT Sim
Kuiter et al. [30]
Modelos de Recursos (gráfico)
Cliente-Servidor OT
Sim Nicolaescu et al. [41]
Modelo de software
Centralizada e ponto a ponto OT Sim
Alsulami and Cherif [2]
Não especificado
Redes Oportunísticas OT Não
Gao et al. [20]
Imagens Bitmap
Ponto a Ponto Não
Jungnickel and Herb [27]
Objetos JSON
Cliente-Servidor OT Sim
Nédelec et al. [39]
Documentos de texto Descentralizado
CRDT Não
Fechner et al. [17]
Dados geográficos Cliente-Servidor Sim
Salvati et al. [49]
Imagens Poligonais Ponto a Ponto Sim
Katayama et al. [28]
Documentos PDF
Cliente-Servidor
Sim
Inoue et al. [24]
Páginas WEB
Cliente-Servidor
Sim
Ozono et al. [45]
Páginas WEB
Cliente-Servidor
Sim
Ozono et al. [44]
Páginas WEB
Cliente-Servidor
Sim
Lautamäki et al. [31]
Código fonte Java (texto)
Cliente-Servidor
Sim
Thum et al. [66]
Diagramas UML
Cliente-Servidor
Sim
Wei et al. [71]
Textos que representam moléculas
Cliente-Servidor
Não
Bani-Salameh et al. [3]
Código fonte de software (texto)
Cliente-Servidor
Não
De Lucia et al. [12]
Diagramas UML
Cliente-Servidor
Não
Lin et al. [33]
Documentos Visio Microsoft
Cliente-Servidor
OT
Não
Leone et al. [32]
Documentos de texto
Cliente-Servidor
Não
Wong [72]
Documentos XML
Cliente-Servidor
Não
Xia et al. [73]
Documentos de texto
Cliente-Servidor
OT
Não
Shen and Sun [54]
Texto
Cliente-Servidor
Não
Figura 4: Arquitetura adotada, algoritmo de sincronização, e plataforma Web
A prevalência da arquitetura cliente-servidor pode ser explicada pelo
fato de ser o modelo mais adotado na internet atualmente. Essa popularidade é reforçada pela estatística de que, em 2023, 86% dos desenvolvedores
utilizaram APIs REST [47] que segue a arquitetura cliente-servidor [18].
Entre os algoritmos OT e CRDT, qual o que aparece com mais frequência nos trabalhos selecionados?
Os algoritmos de Transformação de Operações (OT) foram mais frequentemente utilizados do que os algoritmos de Estado Replicado (CRDT): 7
(sete) estudos utilizaram OT enquanto 2 (dois) utilizaram CRDT. Os demais
estudos não especificaram o algoritmo de resolução de conflitos adotado. A
preferência por OT pode ser atribuída ao fato de ser o método mais tradicional e melhor adaptado ao modelo cliente-servidor [19].
Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil
Figura 5: Testes gerais e testes com usuários.
Quais os principais tipos de testes realizados para avaliar os editores colaborativos, quais os artigos realizaram testes como usuários e qual o número médio de usuários que realizaram os testes?
Entre os 23 trabalhos selecionados, 10 realizaram algum tipo de testes, o que representa aproximadamente 42% dos trabalhos selecionados. Apenas 5 (cinco) entre os 23 trabalhos realizaram testes com usuários. Desses cinco trabalhos que realizaram testes com usuários, 2 (dois) reportaram testes preliminares. O maior número de usuários foi 39, no trabalho de Fechner et al.
[17], e o número mínimo foi 12, no trabalho de Salvati et al. [49]. Além disso, durante a análise dos 23 trabalhos, não foi possível identificar um processo padronizado que definisse um modelo de teste para o desenvolvimento de um RCE.
Quais trabalhos discutem técnicas de undo/redo?
Dos 23 trabalhos incluídos, 3 (três) discutem explicitamente técnicas e recursos de undo/redo. No trabalho de Gao et al. [20] foram apresentados e discutidos os algoritmos BTMVIC e AnyUndo, ambos com o objetivo de resolver problemas de consistência nas operações de undo/redo. No trabalho de Shen and Sun [54] foi apresentado o algoritmo SUCA.
Quais trabalhos discutem a utilização dos comentários, chat ou histórico como ferramentas de apoio ao trabalho colaborativo?
De forma diversificada, 6 (seis) dos 23 trabalhos discutiram sobre recursos de colaboração utilizando chat, anotações ou histórico. No trabalho de Fechner et al. [17] foram verificadas as razões da utilização, ou não, do chat e do recurso de histórico como ferramenta de auxílio. No trabalho de Salvati et al. [49], foi permitido o compartilhamento do histórico de edição para auxílio aos outros usuários. Katayama et al. [28] registram o compartilhamento WRSL+’2024, Juiz de Fora/MG, Brasil
Dantas et al.
Algoritmo SUCA
Destaques no documento
Figura 6: Undo/Redo, histórico, chat e comentários. das anotações (comentários) e a uso de chat por texto. Ozono et al. [45]
também reportam o uso de chat por texto. Bani-Salameh et al. [3] registram a disponibilização de um chat com recursos de VoIP (Voice over Internet Protocol). No editor reportado por Shen and Sun [54], era possível fazer destaques nos textos que eram compartilhados com outros usuários.
4.2 - Resumo dos artigos selecionados
O trabalho de Bath et al. [5] centra-se na concepção e na implementação de um aplicativo web para edição colaborativa em tempo real de imagens raster e vetoriais. Para compreender melhor os requisitos dos usuários, foi realizada uma avaliação preliminar, identificando comunicação e sincronização como elementos essenciais. O sistema desenvolvido utiliza um modelo de documento centralizado, mantido por um servidor que sincroniza as alterações com múltiplos clientes. A implementação prototípica é baseada
em uma arquitetura cliente-servidor escalável, utilizando WebGL para renderização interativa no navegador e WebSocket para manter a sincronização em tempo real. A sincronização é gerenciada de forma centralizada, com um sistema de bloqueio que permite apenas a um usuário editar uma camada Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil por vez. As atualizações são transmitidas por broadcast e serializadas para garantir a consistência. O trabalho foi avaliado qualitativamente através de um estudo como usuários.
O variED é um editor para modelagem de características (feature modeling) colaborativa e em tempo real apresentado por Kuiter et al. [30].
O editor foi desenvolvido para permitir que múltiplos usuários trabalhem simultaneamente na criação e modificação de modelos de características, que são essenciais para o desenvolvimento de software orientado a linha de produtos. A ferramenta aborda desafios críticos, como a manutenção da consistência do modelo e a sincronização das alterações feitas por diferentes usuários em tempo real. A arquitetura do variED é baseada em uma infraestrutura distribuída que utiliza algoritmos de OT para gerenciar as
operações concorrentes, garantindo que todas as edições sejam integradas de forma consistente sem conflitos. Os autores conduziram uma série de testes experimentais e estudos de caso para avaliar o desempenho do variED, demonstrando que a ferramenta é capaz de suportar um grande número de usuários simultâneos sem comprometer a integridade e a consistência do
modelo. A análise dos resultados mostra que variED melhora a eficiência e a produtividade do processo de modelagem de características, e também proporciona uma experiência de usuário fluida e interativa.
Nicolaescu et al. [41] abordam a necessidade de colaboração eficiente entre stakeholders geograficamente distribuídos em ambientes de modelagem conceitual. Para atender a essa necessidade, os autores introduzem a SyncMeta, uma ferramenta de modelagem colaborativa que opera em navegadores web, permitindo a edição compartilhada em tempo quase real.
SyncMeta é projetada para suportar a modelagem baseada em visões, na qual diferentes perspectivas de stakeholders podem ser integradas e negociadas de forma eficaz. A ferramenta permite que stakeholders contribuam simultaneamente, minimizando conflitos e inconsistências nas operações de modelagem. A ferramenta permite a rápida geração de protótipos a partir de especificações, facilitando a análise de impacto e a tomada de decisões. Os estudos conduzidos pelos autores investigaram tanto os requisitos fundamentais da ferramenta quanto opções de design. Entre os requisitos fundamentais avaliados, os autores destacam a aceitação da abordagem de modelagem baseada em visões. As opções de design exploradas no trabalho incluem a resolução de pontos de vista de maneira centralizada versus ponto-a-ponto, considerando o compromisso entre desempenho e complexidade de implementação. Os resultados dos estudos indicam que a SyncMeta oferece uma solução robusta para os desafios de colaboração em ambientes de modelagem distribuídos, melhorando a eficiência e a eficácia das equipes.
Alsulami and Cherif [2] exploram a viabilidade e os desafios da edição colaborativa em redes oportunísticas (ON), na qual a conectividade entre dispositivos é intermitente e imprevisível, focalizando na adaptação de algoritmos baseados em OT para RTCE em ON. São discutidos os principais desafios como alta mobilidade, dinâmica dos nós e atrasos de rede, e revisadas as versões dos algoritmos OT segundo critérios relevantes para ON. O artigo oferece uma visão abrangente para o desenvolvimento e avaliação
de editores colaborativos em ambientes ON. O artigo também aborda as estratégias para sincronização de dados em tempo real, adaptando-os à natureza assíncrona e intermitente das comunicações em redes oportunísticas, e métodos são propostos para reconciliar versões divergentes de documentos editados por dispositivos desconectados. Resultados experimentais são
apresentados, demonstrando o desempenho das abordagens propostas em cenários simulados e reais, com análises quantitativas de consistência de dados, tempo de sincronização e eficiência operacional.
Nédelec et al. [39] apresentam o desenvolvimento e a implementação de um sistema de edição colaborativa em tempo real, chamado CRATE, que é um editor colaborativo descentralizado em tempo real que funciona diretamente em navegadores da web utilizando o WebRTC. CRATE foi um editor em tempo real pioneiro na utilização apenas de navegadores para suportar a edição colaborativa, manejando de forma transparente grupos pequenos e grandes de usuários. As propriedades do CRATE dependem de dois avanços científicos principais:
1) uma estrutura de sequência replicada com limite superior sublinear na complexidade do espaço, o que evita a necessidade de coletores de lixo distribuídos dispendiosos;
2) um protocolo adaptativo de amostragem por pares, que evita o superdimensionamento de tabelas de roteamento, permitindo que redes pequenas não paguem o preço das redes grandes.
Jungnickel and Herb [27] ampliam o escopo do algoritmo de controle de consistência OT para a edição simultânea de objetos JSON compartilhados. A pesquisa detalha as estruturas de dados e as mecânicas subjacentes necessárias para suportar a edição colaborativa de objetos JSON, fornecendo uma base teórica robusta para desenvolvedores de aplicações web. Além disso, o artigo discute o design de aplicativos web que utilizam essa extensão da OT, destacando as vantagens em termos de versatilidade e robustez na colaboração em tempo real. Esta extensão da OT para objetos JSON abre novas possibilidades, permitindo a edição colaborativa de uma gama mais ampla de dados estruturados, desde configurações de software até dados de aplicações complexas. A implementação desta técnica oferece benefícios significativos para desenvolvedores e usuários, criando um ambiente colaborativo mais flexível e poderoso. A capacidade de editar simultaneamente objetos JSON em tempo real pode transformar a maneira como dados estruturados são manipulados colaborativamente, promovendo uma maior eficiência e inovação no desenvolvimento de software e em outras áreas que dependem de dados complexos.
O trabalho de Gao et al. [20] foca nos desafios de garantir que múltiplos usuários possam editar simultaneamente uma imagem bitmap sem causar inconsistências ou conflitos nas alterações. Para resolver esses desafios, os autores propõem um modelo que integra algoritmos de OT para gerenciar e sincronizar as operações de edição realizadas por diferentes usuários. Este
modelo permite que as operações de undo e redo sejam tratadas de forma consistente, mantendo a integridade do estado do bitmap ao longo do tempo, o que é demonstrado através de análises e um protótipo de sistema chamado CoGraphical Editor. Estudos de caso e simulações reforçam a viabilidade do sistema em cenários de uso real, destacando melhorias significativas na precisão e na eficiência das operações de edição colaborativa.
Fechner et al. [17] apresentam uma abordagem para a edição colaborativa em tempo real de dados geográficos, exemplificada pelo Ethermap. O sistema Ethermap foi desenvolvido para permitir que múltiplos usuários possam editar simultaneamente mapas geográficos, garantindo a sincronização imediata e precisa das alterações realizadas. A arquitetura do Ethermap
utiliza tecnologias avançadas de comunicação e OT para gerenciar operações concorrentes, assegurando que todas as edições sejam integradas de maneira consistente. O sistema é projetado para suportar tanto a criação de novos mapas quanto a edição de mapas existentes, oferecendo uma interface intuitiva que facilita a colaboração entre os usuários. Estudos de caso são apresentados para demonstrar a eficácia do sistema em melhorar a colaboração e a produtividade dos usuários durante a manipulação e a
atualização de informações geoespaciais.
Salvati et al. [49] propõem o editor MeshHisto como uma abordagem inovadora para a modelagem colaborativa de objetos 3D, centrada no compartilhamento e redirecionamento de históricos de edição. MeshHisto permite que múltiplos usuários colaborem em projetos de modelagem 3D, compartilhando seus históricos de edição de forma granular e reutilizável. A metodologia proposta utiliza uma estrutura de dados eficiente para capturar e armazenar as operações de edição, permitindo que estas possam ser reaplicadas ou adaptadas a diferentes modelos 3D. Isso facilita a transferência de técnicas e estilos de modelagem entre colaboradores, promovendo uma integração harmoniosa e eficiente do trabalho em equipe. A arquitetura do sistema MeshHisto incorpora mecanismos para resolver conflitos de edição e manter a consistência dos modelos em cenários de edição concorrente.
Estudos de caso demonstram a eficácia do sistema em diversos contextos de modelagem, evidenciando melhorias significativas na produtividade e WRSL+’2024, Juiz de Fora/MG, Brasil Dantas et al. na qualidade dos modelos produzidos. Além disso, a análise empírica dos resultados revela que o compartilhamento de históricos de edição não apenas acelera o processo de modelagem, mas também enriquece a experiência colaborativa ao possibilitar a aprendizagem e a inspiração mútua entre os
usuários.
Katayama et al. [28] reportam uma aplicação web colaborativa para editar documentos PDF usando navegadores. O sistema permite que os usuários editem o mesmo documento em tempo real e compartilhem anotações em documentos simultaneamente. Os autores propõem um mecanismo de sincronização eficiente para aplicações web colaborativas utilizando as capacidades avançadas do HTML5. Este mecanismo visa resolver desafios de latência e consistência que surgem quando múltiplos usuários interagem simultaneamente com uma aplicação web. A abordagem se baseia na utilização de WebSockets para comunicação bidirecional em tempo real
entre clientes e servidores, permitindo atualizações instantâneas e redução de atrasos. O trabalho detalha a arquitetura do sistema, que incorpora algoritmos de OT para gerenciar as operações concorrentes e assegurar que todas as mudanças feitas pelos usuários sejam integradas de maneira consistente. A infraestrutura inclui um servidor central que coordena as operações de sincronização, garantindo que todas as instâncias da aplicação web permaneçam atualizadas.
Lautamäki et al. [31] detalham o desenvolvimento e a implementação de CoRED, um editor colaborativo em tempo real baseado em navegador para aplicações web Java. O CoRED foi projetado para permitir que múltiplos desenvolvedores editem simultaneamente o código fonte de aplicações Java diretamente em um navegador web, promovendo uma colaboração eficiente e integrada. O CoRED é um editor Java completo que inclui verificação de erros e recursos de geração automática de código, além de ser complementado por funcionalidades comumente associadas às mídias sociais. A arquitetura do CoRED incorpora tecnologias avançadas como
WebSockets para comunicação bidirecional em tempo real, garantindo a sincronização imediata das edições feitas por diferentes usuários. Além disso, o sistema utiliza algoritmos de OT para gerenciar operações concorrentes, assegurando que todas as modificações sejam aplicadas de maneira consistente e sem conflitos. A ferramenta foi testada em diversos cenários de desenvolvimento colaborativo, demonstrando melhorias significativas na produtividade e eficiência das equipes de desenvolvimento.
Inoue et al. [24] apresentam o WFE, um RCE que permite a um grupo de pessoas editarem uma página web em um navegador compartilhando o conteúdo de edição em tempo real. Além disso, os autores também propõem a aplicação do WFE para um ambiente de computação em nuvem, chamada WFE-S, com o objetivo de melhorar a escalabilidade, a elasticidade, a capacidade de resposta, bem como de reduzir a necessidade de manutenção.
A arquitetura do sistema é baseada em uma combinação de algoritmos de OT e técnicas de controle de versão, que juntos asseguram que as edições concorrentes sejam integradas sem conflitos. Os autores detalham a infraestrutura técnica, incluindo o uso de servidores intermediários para gerenciar as comunicações entre os clientes e assegurar a integridade das operações de edição. Os estudos experimentais realizados demonstram a eficácia do sistema, mostrando que ele é capaz de lidar com um grande número de
usuários simultâneos sem degradação significativa de desempenho. Além disso, o sistema inclui funcionalidades como a visualização das edições em tempo real e a capacidade de desfazer e refazer mudanças, oferecendo uma experiência de usuário rica e interativa. A análise dos resultados indica que o mecanismo proposto melhora a eficiência da colaboração em tempo real e
aumenta a produtividade e a qualidade do trabalho colaborativo.
Ozono et al. [44] também apresentam o ambiente WFE-S para edição colaborativa de páginas web em tempo real. Além de detalhar a infraestrutura e os algoritmos, os autores realizaram uma série de testes experimentais e estudos de caso para avaliar o desempenho do WFE-S, demonstrando que o sistema é altamente eficiente em termos de latência e escalabilidade.
Os resultados mostram que o WFE-S mantém a consistência dos dados e proporciona uma experiência de usuário suave, mesmo sob alta carga de usuários simultâneos.
Thum et al. [66] descrevem o desenvolvimento e a implementação do SLIM, um ambiente projetado para suportar a modelagem colaborativa síncrona. O sistema SLIM visa facilitar a colaboração em tempo real entre múltiplos usuários na criação e edição de modelos, com foco especial em modelos de sistemas de software. A arquitetura do SLIM incorpora tecnologias que permitem a sincronização imediata de alterações feitas por diferentes participantes, garantindo consistência e integridade do modelo em tempo real. O ambiente utiliza técnicas avançadas de OT para gerenciar operações
concorrentes de maneira eficiente, minimizando conflitos e assegurando que todas as alterações sejam devidamente integradas. O artigo também discute estudos de caso e experimentos realizados para avaliar o desempenho e a eficácia do SLIM em cenários reais de uso. Os resultados demonstram que o ambiente é capaz de suportar uma colaboração eficiente e produtiva, promovendo uma interação fluida entre os participantes durante o processo de modelagem.
Wei et al. [71] abordam o desenvolvimento e a implementação de um ambiente colaborativo de edição científica focado na química. O sistema foi projetado para facilitar a colaboração entre cientistas e pesquisadores na criação e edição colaborativa de documentos científicos relacionados à química. A arquitetura do ambiente colaborativo incorpora funcionalidades
específicas para apoiar a edição em tempo real de documentos científicos complexos, incluindo formulações químicas, estruturas moleculares, diagramas e textos técnicos especializados. O ambiente oferece recursos como controle de versões, que permitem rastrear e gerenciar alterações feitas por diferentes colaboradores ao longo do tempo. Além disso, são implementadas
ferramentas para suportar a análise e a visualização de dados químicos, facilitando a comunicação e a colaboração entre os membros da equipe de pesquisa. O artigo também destaca estudos de caso e experimentos práticos realizados para validar a eficácia e a usabilidade do ambiente colaborativo em cenários reais de pesquisa química. Os resultados demonstram que o
sistema é capaz de melhorar a eficiência e a produtividade dos pesquisadores, ao mesmo tempo que promove uma colaboração mais integrada e eficaz no desenvolvimento de documentos científicos na área da química.
Bani-Salameh et al. [3] registram o design e a implementação de uma de um IDE colaborativo chamado ICI (Idaho Collaborative IDE) que permite que desenvolvedores em diferentes locais colaborem em uma variedade de atividades de desenvolvimento de software em tempo real. O ICI combina um editor de programa colaborativo síncrono e um depurador colaborativo em tempo real em um ambiente virtual multiusuário 3D. O ICI permite que desenvolvedores compartilhem, em tempo real, o processo de edição, compilação, execução e depuração de seus projetos de software. A arquitetura do ICI é composta por quatro componentes principais: 1) um editor colaborativo 2) um ambiente colaborativo shell 3) um conjunto de ferramentas de comunicação, como chat de texto e voz, e 4) uma interface para colaboração controle. A contribuição deste trabalho é uma IDE colaborativa que integra edição colaborativa responsiva e em tempo real e depuração. Os resultados de testes de usabilidade e estudos de caso indicam que o ICI melhora a
produtividade e a eficiência da equipe, reduzindo o tempo necessário para detectar e corrigir erros.
De Lucia et al. [12] apresentam e ferramenta STEVE, destinada à modelagem colaborativa síncrona com gerenciamento de versionamento, que suporta a modelagem distribuída em UML de sistemas de software. STEVE permite que desenvolvedores distribuídos editem simultaneamente o mesmo diagrama UML, decompostos em sub-artefatos gerenciados hierarquicamente, oferecendo gerenciamento de alterações e configurações tanto para diagramas quanto para objetos gráficos. Isso possibilita a reutilização e o compartilhamento consistentes de componentes de diagramas em diferentes projetos. Integrada ao sistema ADAMS, que oferece funcionalidades refinadas de gerenciamento de artefatos e compartilhamento de diagramas, a Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil ferramenta destaca a importância do controle preciso de versões. Ela incorpora mecanismos de versionamento que rastreiam alterações nos elementos individuais do modelo, promovendo a sincronização eficiente e a resolução de conflitos. A arquitetura do sistema, que combina ferramentas de
modelagem UML com um robusto sistema de controle de versões, permite operações colaborativas em tempo real. Comparações com métodos tradicionais de versionamento demonstram melhorias significativas em precisão e eficiência na gestão de alterações concorrentes. Estudos de caso e testes empíricos validam a eficácia da ferramenta, mostrando que ela facilita a
colaboração contínua e a integração de mudanças de maneira fluida.
Leone et al. [32] reportam TeNDaX, um editor colaborativo em tempo real, baseado em um sistema de banco de dados, conforme descrito no trabalho de . O editor armazena documentos, incluindo conteúdo, estrutura, tabelas e imagens, em um banco de dados semiestruturado, o que facilita a edição colaborativa e o layout dos documentos. Além disso, o TeNDaX oferece funcionalidades avançadas como operações de desfazer e refazer, definição e execução de processos de negócios, e recursos de segurança
e conscientização do contexto. Durante a criação e uso dos documentos, metadados são coletados automaticamente, permitindo a criação de pastas dinâmicas, rastreamento da proveniência dos dados, e a realização de mineração e pesquisa visual e de texto. A plataforma é comparada a uma "LAN-Party"de processamento de texto, suportando múltiplos editores e sistemas operacionais diferentes. Esse ambiente colaborativo permite a execução de operações locais e globais de desfazer e refazer, facilitando a edição em tempo real. Além disso, o TeNDaX demonstra a utilização eficiente de dados e metadados para criar pastas dinâmicas, visualizar a proveniência dos dados, realizar mineração visual de texto e oferecer funcionalidades de pesquisa avançadas. O sistema também destaca a extensão do banco de dados para gerenciar texto, mostrando como a integração de dados e metadados pode aprimorar significativamente a experiência de edição colaborativa em tempo real.
Wong [72] estudam como múltiplos usuários podem colaborar de forma eficaz na criação e edição de documentos hipertextuais usando dispositivos móveis, considerando as limitações típicas desses ambientes, como conectividade intermitente e recursos limitados. Os autores apresentam um protótipo de sistema de edição colaborativa com um mecanismo para sincronizar atualizações de editores simultâneos, integrado ao sistema de gerenciamento de banco de dados XML nativo SODA. A pesquisa discute diversas estratégias e tecnologias para facilitar a colaboração em tempo real, incluindo o uso de protocolos de comunicação eficientes, algoritmos de
reconciliação de conflitos e interfaces de usuário adaptadas para dispositivos móveis. São exploradas técnicas para garantir a consistência e a sincronização das edições realizadas por diferentes usuários, mesmo em condições adversas de rede e mobilidade. O artigo também apresenta estudos de caso e experimentos práticos para avaliar a viabilidade e a eficácia das soluções
propostas. Resultados experimentais são discutidos para demonstrar a performance e a usabilidade do sistema em cenários reais de uso, destacando melhorias na colaboração e na produtividade dos usuários móveis durante a edição de documentos hipertextuais.
Xia et al. [73] investigam a transformação de aplicações de usuário único em plataformas colaborativas multiusuário através da abordagem CoWord. Os autores apresentam um trabalho com o objetivo central de adaptar o Microsoft Word, uma aplicação originalmente concebida para uso individual, para suportar a edição colaborativa em tempo real. A metodologia empregada envolve a integração de um mecanismo de sincronização que permite a múltiplos usuários editar simultaneamente o mesmo documento, mantendo a consistência e a integridade das alterações. Utilizando técnicas de OT e algoritmos de resolução de conflitos, o CoWord assegura que as edições concorrentes sejam harmonizadas eficientemente. O artigo descreve a arquitetura do sistema CoWord, destacando componentes essenciais como o servidor de sincronização, os clientes distribuídos e o protocolo de comunicação utilizado para garantir uma colaboração fluida. Resultados experimentais são apresentados para demonstrar a eficácia do CoWord, evidenciando melhorias significativas na produtividade e na experiência colaborativa dos usuários. Estudos de caso exemplificam a aplicabilidade da abordagem em diversos contextos profissionais e educacionais, realçando a versatilidade e a robustez da solução proposta.
Shen and Sun [54], considerando oferta do recurso de destacar texto de modo síncrono, identificaram três necessidades principais: 1) diferenciar destaques feitos por diferentes usuários; 2) resolver problemas de inconsistência causados por operações simultâneas; 3) oferecer uma função de desfazer flexível, permitindo reverter qualquer operação de destaque a qualquer momento. Para atender a essas necessidades, foi desenvolvido o sistema REDUCE (Real-time Distributed Unconstrained Collaborative Editing). O artigo apresenta soluções específicas, incluindo os algoritmos de transformação IT_EH e IT_HH, além do algoritmo de controle OSCA, que resolvem problemas de divergência causados por operações de destaque sobrepostas.
Adicionalmente, o algoritmo GOTO foi estendido para controlar a transformação de operações de destaque em relação às operações de edição. A função de desfazer foi aprimorada com os algoritmos de transformação IT_HU e o algoritmo de controle SUCA, permitindo desfazer seletivamente qualquer operação de destaque a qualquer momento. Resultados experimentais, obtidos através de estudos de caso e de testes de usabilidade, demonstram que o uso do highlighting melhora significativamente a compreensão mútua, reduz o tempo de resolução de tarefas colaborativas e aumenta a satisfação dos usuários. A análise quantitativa e qualitativa dos dados coletados sustenta a eficácia da ferramenta em diversos cenários de aplicação, incluindo edição de documentos, design gráfico e programação em pares.

RISCO À VALIDADE
Em relação aos resultados relatados nos artigos, o principal viés está associado à fase inicial e exploratória de muitos dos estudos, dado que apenas 10 dos estudos apresentam algum tipo de avaliação e, dentre eles, apenas 5 (cinco) relatam estudos com a participação de usuários.
No viés associado à realização da revisão, os principais riscos e as ações tomadas para minimizá-los foram:
(1) A pesquisa foi restrita a trabalhos classificados como sendo da área de Computação pela ACM. Não foram tomadas ações neste caso pois considerou-se que os principais veículos estão indexados;
(2) A string de busca restringiu a pesquisa aos campos de título e resumo. Não foram tomadas atitudes porque considerou-se que os trabalhos mais relevantes foram identificados;
(3) A distinta experiência dos 3 avaliadores. Para diminuir o risco de viés associado, a seleção foi realizada individualmente por dois avaliadores de forma que um não soubesse as escolhas do outro, e divergências foram definidas por uma pessoa árbitra.

DESAFIOS DE PESQUISA
Os resultados obtidos com esta revisão fornecem uma base para o desenvolvimento futuro de sistemas com suporte a RTCE. Os estudos identificados sugerem múltiplas vias para alcançar eficiência e eficácia na edição colaborativa em tempo real, cujos temas são reportados na literatura recente.
Testes e Avaliação com Usuários: Realizar testes abrangentes é um desafio fundamental para a pesquisa em RTCE. A maioria dos estudos ainda é limitada em termos de número de usuários e de cenários avaliados. Garantir a condução de estudos que envolvam um número apropriado de participantes, participantes com diferentes papéis e em ambientes variados, como no estudo de de Lange et al. [11], pode proporcionar uma compreensão mais completa dos desafios enfrentados pelos usuários e das características
desejadas nos sistemas colaborativos. WRSL+’2024, Juiz de Fora/MG, Brasil Dantas et al.
Algoritmos de resolução de conflitos: Estudos ainda são necessários neste tema dado que, apesar das análises de Sun et al. [62, 64] explicitarem as vantagens de OT em relação CRDT, pesquisadores continuam a advogar pelo uso de CRDT. Por exemplo, Kleppmann [29] apresenta um algoritmo para operações de movimentação de elementos em CRDTs de listas, e Litt et al. [34] tratam da edição de texto rico. Outros exemplos são os frameworks YJS [26], para compartilhamento de dados, e Hocuspocus [25], para edição
colaborativa.
Diversidade de Objetos Editáveis e ambientes heterogêneos: Um desafio significativo na pesquisa de sistemas RTCE é expandir a capacidade desses sistemas para suportar uma gama mais ampla de objetos editáveis.
Atualmente, muitos sistemas são otimizados para tipos de objetos relativamente simples, como textos e planilhas. No entanto, a demanda está crescendo por sistemas que possam lidar com modelos gráficos complexos e diagramas interativos, entre outros [11, 29, 34]. Desenvolver abordagens que garantam a consistência visual e a integridade dos dados para esses tipos de objetos apresenta uma oportunidade para avanços significativos na área. Outro desafio é a construção de sistemas de co-edição heterogêneos, permitindo que múltiplos usuários utilizem editores diferentes para editar documentos compartilhados na mesma sessão [8]. Essa abordagem destaca a necessidade de maior flexibilidade e adaptabilidade nos sistemas de edição colaborativa, evidenciando a importância de suportar uma diversidade maior de objetos e editores para melhorar a experiência colaborativa.
Edição Colaborativa de Texto Rico: A edição colaborativa de texto rico, que inclui formatação e outras características visuais, apresenta desafios específicos em comparação com a edição de texto simples. Por exemplo, Litt et al. [34] descrevem um algoritmo CRDT para edição colaborativa de texto rico. A estratégia armazena spans de formatação ao lado da sequência de caracteres do texto e deriva o texto formatado final de forma determinística para que operações concorrentes sejam comutativas.
Edição Colaborativa de Vídeo: O design de ferramentas para edição colaborativa de vídeo também levanta questões importantes e oportunidades de pesquisa. Por exemplo, Okopnyi et al. [42] exploram as complexidades do design para edição colaborativa de vídeo, destacam a necessidade de integrar recursos colaborativos específicos para software de edição nãolinear, e discutem os desafios associados à introdução desses recursos. A pesquisa sugere que, além dos recursos colaborativos convencionais, pode
ser necessário desenvolver representações abstratas alternativas para mídias baseadas em tempo para facilitar a colaboração eficaz na edição de vídeo.
Integração de Modelagem e Edição Colaborativa em Processos de Desenvolvimento: Além dos avanços na edição colaborativa de textos e vídeos, a integração de técnicas colaborativas em processos de desenvolvimento web também apresenta desafios. Por exemplo, de Lange et al. [11] investigam a integração de modelagem colaborativa e edição de código em um processo de engenharia web orientado a modelos (MDWE). O estudo propõe uma abordagem que combina edição ao vivo e wireframing com modelagem colaborativa em tempo real, abordando a sincronização entre código-fonte, wireframes e modelos.
Implementação de Undo/Redo: A implementação de operações de undo e redo continua a ser um desafio de pesquisa no contexto de edição colaborativa em tempo real, em particular no contexto de objetos complexos e interativos. Sun [60] propõe uma solução para operações de undo em editores colaborativos, permitindo desfazer qualquer operação a qualquer momento, independentemente do contexto de undo. A solução usa OT para garantir que uma operação possa ser desfeita, suportando múltiplos modos de undo (único, cronológico e seletivo) na mesma sessão. Já Stewen and Kleppmann [58] utilizam CRDT para implementar um novo algoritmo que
implementa undo/redo de acordo com a semântica modelada pelos autores a partir de um conjunto de ambientes de edição investigados.
Representação e Diagramação: Outro desafio importante é o desenvolvimento de técnicas e de ferramentas de representação que capturem de forma eficaz as interações dinâmicas e o comportamento em tempo real dos sistemas RTCE. Inovar na criação de diagramas e modelos que possam representar adequadamente essas interações é crucial para melhorar a compreensão e o gerenciamento desses sistemas. Por exemplo, Yu and Lu [74] propõem uma ferramenta de discussão colaborativa adaptada para ambientes MOOC, utilizando de um esquema de Address Space Transformation para simular a interação entre usuários históricos e atuais. Essa abordagem pode inspirar novas maneiras de representar interações dinâmicas em sistemas RTCE, especialmente em ambientes educacionais.
Integração de Comentários, Chat e Histórico: Melhorar a integração e a gestão de ferramentas de apoio colaborativo, como comentários, chat e histórico de edições, representa um desafio significativo, entre outros, relativamente à interação. No contexto da edição de imagens, por exemplo, Bath et al. [4] optaram por posicionar a janela de troca de mensagens sobre
a imagem sendo editada. Desenvolver métodos que otimizem o uso dessas ferramentas e avaliem seu impacto na produtividade e na eficácia do trabalho em equipe são relevantes para permitir integração sem comprometer a interação dos usuários nem o desempenho do sistema.
Colaboração Humano-Computador: A colaboração entre humanos e computadores na edição pode representar um avanço significativo na eficácia e eficiência dos sistemas RTCE. O trabalho de Pan et al. [46] introduz uma ferramenta de edição colaborativa que divide a tarefa entre o humano e o computador, permitindo que cada um se concentre em suas especialidades.
Explorar e desenvolver ferramentas que integrem a colaboração humanocomputador pode reduzir o esforço necessário para operações complexas e melhorar a eficiência na edição colaborativa.
Inclusão de Usuários com Deficiências: Um desafio constante na pesquisa em RTCE é garantir que os sistemas de edição colaborativa sejam acessíveis e eficazes para pessoas com deficiências. O trabalho de Akter et al. [1] revela as barreiras enfrentadas por facilitadores de reuniões com deficiência visual ao usar ferramentas de videoconferência, destacando a
necessidade de interfaces mais inclusivas e adaptáveis. Investigar como as tecnologias de edição colaborativa podem ser projetadas para atender às necessidades específicas de diferentes grupos de usuários é crucial para promover a equidade e a acessibilidade no ambiente colaborativo.

CONSIDERAÇÕES FINAIS
No presente trabalho apresentamos uma Revisão Rápida que buscou identificar pesquisas que descrevessem o desenvolvimento de sistemas com suporte a RTCE, bem como algoritmos ou técnicas importantes para o seu desenvolvimento.
Os dados extraídos desses artigos foram organizados de maneira a destacar aspectos importantes como o tipo de objeto editado, a arquitetura adotada, os algoritmos de sincronização utilizados, os tipos de avaliações realizadas, e os recursos de edição oferecidos. A análise revelou diversas abordagens e técnicas empregadas na implementação de RTCE, proporcionando uma visão abrangente das pesquisas nessa área, e permitiu identificar desafios para pesquisas futuras.

AGRADECIMENTOS
Agradecemos as pessoas revisoras pelas valiosas sugestões que contribuíram para o aprimoramento do conteúdo e da apresentação deste trabalho. Desenvolvimento de Editores Colaborativos em Tempo Real: Revisão Rápida WRSL+’2024, Juiz de Fora/MG, Brasil
