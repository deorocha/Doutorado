Um framework de rastreamento corporal para reabilitação
neuromotora com suporte a aplicativos multimídia
Elvis Ribeiro
elvishribeiro@gmail.com
Universidade Federal de São João
del-Rei (UFSJ)
São João del-Rei, MG, Brasil
Alexandre Brandão
alexandre.brandao@puc-
campinas.edu.br
Universidade Pontifícia Católica de
Campinas (PUC-Campinas)
Campinas, SP, Brasil
Marcelo Guimarães
marcelo.paiva@unifesp.br
Universidade Federal de São Paulo
(UNIFESP)
Osasco, SP, Brasil
Leonardo Rocha
lcrocha@ufsj.edu.br
Universidade Federal de São João
del-Rei (UFSJ)
São João del-Rei, MG, Brasil
José Remo Brega
remo.brega@unesp.br
Universidade Estadual Paulista
(UNESP)
Bauru, SP, Brasil
Diego Dias
diego.dias@ufes.br
Universidade Federal do Espírito
Santo (UFES)
Vitória, ES, Brasil
WebMedia’2024, Juiz de Fora, Brazil
Ribeiro et al.
físicas na população infantil. Como mostrado por Guimaraes
et al. [5], o cansaço físico é um fator limitante ao tempo de
interação do usuário com tecnologias virtuais baseada em
gestos, evidenciando que um maior grau de fortalecimento
da musculatura do corpo poderia colaborar com o aumento
de tempo de interação dos usuários com as iminentes tecnolo-
gias suportadas por gestos corporais, tais como o controle de
televisores inteligentes por meio de movimentos com as mãos,
sendo assim um movimento natural ao cotidiano do usuário.
As aplicações de multimídia vêm desempenhando um papel
importante nos dias atuais e estão presente nas mais diversas
áreas, incluindo como ferramenta no auxílio de reabilitação
[1, 3, 15]. A interação é parte essencial do engajamento do
usuário com o ambiente virtual, podendo ser alcançada por
meio de controles, toques ou até mesmo gestos. A solução
apresentada no trabalho utiliza-se da interação natural do
usuário (NUI), sendo estes captados por meio de sensores
inerciais embarcados. A interação entre o usuário e o sistema
deve ser, idealmente, o mais natural possível. Em sistemas
de realidade virtual (RV), por exemplo, em que a imersão
impossibilita o uso de teclados, mouses e telas sensíveis ao
toque, a interação é realizada por meio de soluções específi-
cas como joysticks, gestos e voz. Em casos onde o usuário é
incapaz de operar um joystick, ou quando se deseja estimular
a movimentação corporal, a interação por meios de gestos
corporais se mostra uma excelente escolha.
Tecnologias de rastreamento corporal vêm sendo utilizadas
largamente na indústria de jogos [4]. Dispositivos de rastrea-
mento óticos, tal como o Kinect da Microsoft ou soluções
Mocap1, utilizam visão computacional para rastrear o corpo
humano [14]. Porém, o uso do Kinect apresenta limitações
como liberdade, precisão e oclusão, o que limita o movimento
do usuário ao campo de visão do dispositivo e impossibilita a
captura de movimentos do usuário em posição lateral (se uti-
lizado apenas um dispositivo). Tais problemas são mitigados
quando empregadas as soluções Mocap, visto que utilizam
múltiplas câmeras de captura e diversos marcadores anexa-
dos ao corpo do usuário, porém o preço elevado é um fator
obstante na escolha de uma solução boa e razoavelmente
barata. Neste trabalho, utilizamos o biomechanical sensor
node (BSN) como dispositivo de interação.
O BSN [2] é um dispositivo de rastreamento corporal ino-
vador desenvolvido por Brandão e sua equipe. Ele utiliza uma
rede de sensores colocados estrategicamente no corpo para
capturar movimentos e posturas em tempo real, permitindo
que o usuário possa controlar ambientes virtuais por meio da
NUI. Esses dados são então processados e utilizados para criar
uma representação digital precisa do usuário. O BSN tem
aplicações potenciais em uma variedade de campos, incluindo
reabilitação física, esportes e entretenimento interativo. Sua
precisão e facilidade de uso o tornam uma ferramenta valiosa
para profissionais e pesquisadores dessas áreas.
A principal justificativa desse trabalho está relacionada a
dificuldade em se simular a interação do usuário dentro de
1Rastreamento corporal através de marcadores presos ao corpo do
usuário e diversas câmeras de alta definição circundando o ambiente.
um ambiente virtual de maneira intuitiva e imersiva. Outro
benefício, no que tange o uso de ambientes virtuais, é a pos-
sibilidade do usuário realizar o treinamento em um ambiente
controlado e seguro, visto que o ambiente virtual não gera
perigo real, quando comparado a um ambiente real de treina-
mento. Portanto, pesquisas voltadas a meios de interação
de ambientes virtuais são importantes ao desenvolvimento e
difusão de novas aplicações.
Apresentamos neste trabalho a definição do framework de
rastreamento corporal, que possibilita a criação de aplicações
de NUI utilizando o dispositivo BSN, assim como a criação e
armazenamento de sessões de fisioterapia, contexto apresen-
tado como exemplo para a criação de aplicações voltadas à
reabilitação neuromotora. Outras aplicações exemplo também
são apresentadas.
METODOLOGIA
Desenvolver um framework envolve uma série de etapas
metodológicas. Primeiro, é necessário identificar e entender
claramente o problema ou a necessidade que o framework se
propõe a resolver. Em seguida, é importante realizar uma
análise aprofundada do domínio do problema para identificar
padrões comuns e abstrações. Com base nessa análise, o próx-
imo passo é projetar a arquitetura do framework, definindo
suas principais classes e interfaces, bem como suas interações.
A implementação do framework deve ser feita de forma mod-
ular e extensível, permitindo que os desenvolvedores person-
alizem e estendam sua funcionalidade conforme necessário.
Por fim, é crucial fornecer documentação detalhada e ex-
emplos de uso para ajudar os desenvolvedores a entender e
utilizar o framework efetivamente. É importante notar que o
desenvolvimento de um framework é um processo iterativo
que requer refinamento e evolução contínuos com base no
feedback dos usuários e nas mudanças nas necessidades do
domínio.
O primeiro passo foi levantar quais requisitos comuns
as aplicações beneficiadas pelo uso do framework possuem.
Foram levantados alguns requisitos funcionais, tais como:
conexão de múltiplos BSNs – a possibilidade de sincronizar
vários BSNs para controlar diferentes partes do corpo hu-
mano; interface de fácil utilização – uma interface intuitiva,
que permita a descoberta e conexão dos dispositivos BSN; e
configuração remota – a possibilidade de realizar a configu-
ração a partir de outro dispositivo (smartphone ou desktop).
Adotamos a arquitetura Modelo-Visão-Controle (MVC) e
seguimos o paradigma orientado a eventos. O MVC é um
padrão de design amplamente utilizado na programação de
software que separa os componentes de um sistema em três
partes distintas. Dessa forma, o asset fica completamente
encapsulado, deixando toda a parte de configuração dos BSN
transparente para o programador/usuário.
2.1
Modelo
O Modelo é o módulo responsável por fazer a gerência
dos dispositivos BSN, a coleta de dados e a rotação dos
Um framework de rastreamento corporal para reabilitação neuromotora com suporte a aplicativos multimídia
WebMedia’2024, Juiz de Fora, Brazil
objetos virtuais. É composto pela API2 de BLE Bluetooth-
HardwareInterface, pela classe BSNHardwareInterface. Ela
não armazena os dados do BSN, mas sim uma lista de uma
nova classe, a classe BSNDevice, que abstrai um dispositivo
BSN e a RotatableObject, que é a classe que de fato está
disponível para ser usada pelo programador.
A classe BSNHardwareInterface é responsável apenas por
realizar a comunicação com o BluetoothHardwareInterface e
por armazenar uma lista de BSNDevices. Após receber o co-
mando FindBSN, por meio da ConfigurationAPI, é iniciado o
processo de descoberta. Sempre que um beacon3 é encontrado,
a BSNHardwareInterface recebe uma resposta contendo o
nome e o endereço MAC do dispositivo, em seguida adiciona-
o à lista de BSNs e envia uma resposta à ConfigurationAPI,
informando que o dispositivo foi encontrado. Esse processo
é assíncrono e sempre é executado ao encontrar um novo
beacon, toda a comunicação sendo feita por meio de callbacks.
O procedimento de conexão de um BSN é análogo ao
de descoberta. A ConfigurationAPI envia o comando de
conexão, passando como parâmetro o endereço do dispositivo
que deseja conectar. Esse comando de conexão é repassado
até o dispositivo BLE, que eventualmente responde o sucesso
de conexão informando todos os serviços e características
disponíveis. Nesse momento o objeto BSNDevice cadastra
seus delegates para receberem os dados sempre que forem
atualizados no BSN.
A classe BSNDevice representa um BSN na aplicação,
contendo seu nome, endereço e um campo booleano que
indica se está conectada. Ela conta também com um objeto
da classe RotatableObject, responsável por manipular objetos
3D no Unity 4, possuindo métodos que de fato lidam com os
dados do BSN. Portanto, a BSNDevice não lida com os dados
propriamente dito, apenas os repassa à RotatableObject.
Sendo assim, é possível intercambiar o objeto controlado por
um BSN em tempo de execução.
A classe RotatableObject oferece os métodos que recebem
dados que são chamados pela BSNDevice a cada notify5 do
BSN, a aceleração linear, dados brutos e vetor de gravidade,
sendo eles LinearAccHandler(Vector3 linAcc), RawDataHan-
dler(Vector3 accelerometer, Vector3 gyroscope, Vector3 com-
pass) e GravityVectorHandler(Vector3 gravityVector), respec-
tivamente. Esses métodos não são implementados e devem
ser implementados pelo usuário programador. O método
ResetOffset() também está disponível e deve ser chamado
sempre que se desejar compensar a rotação do BSN.
A fim de sanar a diferença de orientação entre o dispositivo
e o ambiente virtual, a classe RotatableObject possui duas
funcionalidades: a troca de um eixo com outro e a inversão
do sentido de um eixo. Ambas funcionalidades são úteis para
2Application Programming Interface
3Sinal do transmissor BLE do BSN.
4O Unity é uma plataforma de desenvolvimento em tempo real, líder
no mercado mundial, que permite a criação de jogos e simulações
2D e 3D para diversas plataformas (PC, consoles, mobile, VR e AR),
utilizando um editor visual e programação através de scripting, ofere-
cendo ferramentas profissionais capazes de atender aos requisitos de
qualquer jogo.
5Envio de dados de um dispositivo BLE.
corrigir a orientação do eixo dependendo da posição em que
o BSN é anexado ao corpo do usuário.
Surge uma outra questão quando queremos que a posição
inicial do BSN seja diferente da posição padrão – T-pose 6.
Sempre que inicializado, o BSN precisa ser mantido em re-
pouso na horizontal por aproximadamente 30 segundos antes
de começar a utilizá-lo, a fim de calibrar os sensores. No caso
em que o objeto controlado é a perna de um avatar, o BSN
é anexado verticalmente na coxa do usuário, gerando uma
rotação imprevisível na coxa quando a rotação deveria ser
zero. Tendo isso em vista, é necessário a aplicação de um
offset sobre a rotação do BSN, de tal modo que:
𝑄𝑜𝑏𝑗𝑒𝑡𝑜= 𝑄𝑜𝑓𝑓𝑠𝑒𝑡* 𝑄𝐵𝑆𝑁.
(1)
O 𝑄𝑜𝑓𝑓𝑠𝑒𝑡deve ser calculado sempre que se deseja compen-
sar a rotação, ou seja, definir a rotação atual como rotação
zero. O cálculo é dado a partir da Equação 1, multiplicando o
Inverso da 𝑄𝑟𝑜𝑡𝑎çã𝑜𝑑𝑜𝐵𝑆𝑁em ambos os lados da equação.
𝑄𝑜𝑏𝑗𝑒𝑡𝑜* 𝑄𝐵𝑆𝑁
−1 = 𝑄𝑜𝑓𝑓𝑠𝑒𝑡* 𝑄𝐵𝑆𝑁* 𝑄𝐵𝑆𝑁
−1
(2)
𝑄𝑜𝑓𝑓𝑠𝑒𝑡= 𝑄𝑜𝑏𝑗𝑒𝑡𝑜* 𝑄𝐵𝑆𝑁
−1
(3)
Ao ser adicionada a um GameObject no Unity, a classe
RotatableObject oferece campos de configuração no Inspec-
tor. Outros dois campos são criados. O campo Simplified
Name é um apelido que é dado ao objeto que é mostrado
na interface de configuração; já o campo Precision Points
delimita o número de casas decimais que são utilizadas na
rotação. Seu valor padrão é dois, obtido após testes empíricos
onde foi possível observar que mais de duas casas decimais é
majoritariamente ruído.
2.2
Visão
O módulo Visão é composto por uma interface criada no
Unity com auxílio do asset de ícones e animações Modern
UI Pack [11]. Este módulo possui duas classes: UIController,
uma classe que gerencia a interface; e NetConfigurationServer,
que realiza a comunicação de rede.
Como a proposta foi criar um asset de integração em
que fosse possível funcionar em novos projetos e também
projetos legados, a interface foi projetada para ser o menos
invasiva possível. A interface possui um botão cuja função é
ativar e desativar a interface de configuração, que se encontra
inicialmente desativada (Figura 1a).
A tela de configuração é composta por um botão de iniciar
busca, um painel onde são listados os BSNs encontrados e
o botão que compensa (atribui o offset) a rotação de todos
os BSNs. O botão de busca permanece desabilitado até que
se encontre um servidor de configuração (apresentado da
Seção 2.3). Após iniciada a busca, cada BSN encontrado é
adicionado no painel. O item que representa o BSN encon-
trado conta com o nome e o endereço MAC do dispositivo,
como também um menu suspenso para escolha de qual objeto
deseja-se controlar e um botão de conexão.
6Na animação por computador, a T-pose é uma pose padrão para o
esqueleto de um modelo 3D antes de ser animado.
WebMedia’2024, Juiz de Fora, Brazil
Ribeiro et al.
(a) Menu de configuração desati-
vado.
(b) Buscando um servidor na
rede.
(c) Interface pronta para busca.
(d) Interface com a busca ini-
ciada. Na imagem há os três
estados do BSN: Desconectado,
Conectando e Conectado.
Figure 1: Telas da interface do BSNAsset
A classe UIController gerencia a entrada do usuário e pro-
jeta na interface de usuário as informações recebidas pelo
Controller. Ela trabalha em conjunto com a NetConfigu-
rationClient, que se comunica em rede com a NetConfigu-
rationServer. Inicialmente, a NetConfigurationServer envia
mensagens de broadcast na rede com o token da aplicação em
busca de um servidor, que após receber é enviada uma req-
uisição de conexão (passos 2 e 3 do diagrama de sequência).
Em seguida o cliente solicita a lista de RotatableObjects e os
armazena em uma lista (passo 4). A partir desse momento
toda interação é disparada pelo usuário final por meio da
interface (passos 5, 6 e 7).
2.3
Controle
O Controle é a camada responsável por receber comandos
e aplicá-los ao Modelo, como também retornar à Visão o
estado atual do Modelo. É composto por uma Interface de
Programação de Aplicação (API) de configuração que dispõe
de métodos necessários para uma sessão de uso do asset.
Em conjunto com a ConfigurationAPI, a classe NetConfigu-
rationServer atua como uma classe que aguarda comandos da
rede, permitindo a configuração remota dos BSNs, escutando
sob um socket UDP gerenciado pela biblioteca Ruffles [12].
Inicialmente, a ConfigurationAPI aguarda por broadcasts na
rede na porta 5556, contendo um token. Se este token recebido
pelo broadcast for o esperado, este é enviado para o disposi-
tivo de origem e imediatamente aguarda pela requisição de
conexão.
Após conectado, a ConfigurationAPI aguarda por men-
sagens do cliente, respeitando o protocolo apresentado na
Tabela 1. Os dados são separados do comando usando o
caractere "/" como separador.
Mensagem
Dado Recebido
Servidor
Broadcast
Token
de
identifi-
cação da aplicação
Connection
-
StartDiscovering
-
Connect
Endereço MAC
GetObjNames
-
SetObj
Endereço
MAC
e
nome do objeto
Cliente
AllBsn
JSON contendo um
resumo de todos os
BSNs conectados
ObjNames
Lista dos nomes dos
RotatableObjects
disponíveis
Table 1: Mensagens que o servidor e cliente de configuração
aguardam
RESULTADOS
Os resultados deste trabalho consistem em implantações
diretas do BsnAsset como alternativa de interação em pro-
jetos de RV, como o Mazze e o Simulador de Pênalti, duas
aplicações que permitem demonstrar o funcionamento da
solução tanto para membros superiores, quanto para mem-
bros inferiores. É apresentada também uma solução quer
permite a criação e gravação de sessões (no contexto de
neuroreabilitação/fisioterapia).
3.1
Mazze
O Mazze é um jogo composto de um labirinto gerado aleato-
riamente (obtido em [16]), dentro do qual são posicionadas
Um framework de rastreamento corporal para reabilitação neuromotora com suporte a aplicativos multimídia
WebMedia’2024, Juiz de Fora, Brazil
moedas douradas e uma esfera (Figura 2). O objetivo do
jogo é coletar todas as moedas no menor tempo possível,
deslocando a esfera pelo labirinto.
Durante o jogo, o usuário rotaciona o BSN para controlar o
labirinto, que também é rotacionado, reproduzindo de forma
fidedigna o movimento realizado pelo usuário, movendo a
esfera pelos corredores. O BSN deve ser posicionado horizon-
talmente, podendo estar situado no dorso ou palma da mão.
Como é utilizada apenas a rotação do dispositivo (ângulos
de Euler), o BSNAsset foi utilizado apenas da forma plug-
and-play, pois apenas necessita indicar que o labirinto deve
ser controlado pelo dispositivo.
Figure 2: Estado inicial do jogo Mazze
O Mazze pode ser utilizado em processos de reabilitação
motora das mãos. Assim, o paciente estará se exercitando à
medida que joga
3.2
Simulador de Pênalti
O Simulador de Pênalti possibilitou o uso de todos os
recursos disponibilizados pelo BSNAsset. Nesta aplicação,
são utilizados os dados brutos do BSN, disponíveis via API
do asset. O jogo consiste em um campo de futebol virtual
com um goleiro e o usuário, como pode ser observado na
Figura 3.
Durante a simulação o usuário controla a perna e canela do
avatar com um par de BSNs colocados na parte anterior da
coxa (porção medial) e perna (porção distal), respectivamente.
A movimentação dos membros é feita utilizando o modo plug-
and-play do asset, que apenas indica no Unity que estes
objetos devem ser controlados pelo BSN. Por sua vez, a força
do chute é obtida a partir da API do asset, que fornece os
dados do acelerômetro do dispositivo.
No momento em que o pé do avatar entra em contato
com a bola, a força do chute é calculada multiplicando a
aceleração obtida do acelerômetro do BSN por um valor
pré-definido (representando a massa). Em seguida, a força é
aplicada na bola como um impulso na mesma direção e em
sentido contrário à normal da colisão.
A defesa do goleiro é feita calculando-se a posição em que a
bola chegará no gol usando equações de movimento balístico.
Em seguida, é disparada a animação em que o goleiro mais
Figure 3: Cenário do Simulador de Pênalti
se aproxima da bola. Entretanto, como as animações foram
criadas de forma determinística, os pontos que o goleiro
consegue defender são limitados. Desta maneira, o profissional
da saúde pode usar o simulador para execução de exercícios
referentes às pernas de forma lúdica.
3.3
Recorder e Recorder Controller
O ReBase [17] foi criado para ser uma base de dados não-
relacional utilizada para armazenar sessões de reabilitação
neuromotora contendo informações da sessão e os movimen-
tos executados pelo paciente durante o exercício. Em [17] é
apresentado uma estrutura de armazenamento como também
é fornecido uma API para gravação e recuperação desses
dados.
Visando consumir essa API de gravação utilizando dados
de rotação de um avatar em 3D, foram criados dois assets,
sendo eles: Recorder, e Recorder Controller. Os assets são
distribuidos em forma de pacotes que podem ser utilizados
de forma desacoplada em diferentes dispositivos, desde que
estejam sob a mesma rede LAN, ou no mesmo dispositivo,
como apresentado em 3.4.
A vantagem de se utilizar o Recorder Controller em um
dispositivo separado é permitir que aplicações em RV sejam
utilizadas pelo paciente através do uso de Óculos VR, uma
vez que o controle de gravação é feito remotamente.
3.3.1
Recorder. O Recorder é uma ferramenta criada para
reconhecer, interpolar e salvar os dados de rotação de um
avatar 3D, podendo ser utilizada independente do método
de rastreamento corporal, desde que o avatar onde a movi-
mentação for aplicada esteja dentro do padrão definido pelo
Recorder.
O fluxo de execução do Recorder inicia quando o comando
de iniciar a gravação da sessão de movimentos é recebido pelo
módulo de comunicação em rede. Em seguida os dados são
armazenados com um sample rate igual à taxa de quadros
(ou Frames per second (FPS)) atual da aplicação.
Uma vez que o ReBase não oferece possibilidade de gravar
o timestamp juntamente com a amostra, é necessário fixar um
WebMedia’2024, Juiz de Fora, Brazil
Ribeiro et al.
sample rate fixo, de modo que a recuperação dos dados grava-
dos mantenha a velocidade real do movimento. Além disso,
sabemos que o FPS de uma aplicação depende diretamente
do hardware que ela está sendo executada, impossibilitando
o uso desses dados não confiáveis.
Sendo assim, ao fim da gravação de um movimento, as
amostras devem passar por um processo chamado de resam-
pling. Esse processo garante que independente do tamanho
do array de entrada, a saída terá o tamanho especificado,
sendo necessário utilizar interpolação linear para garantir
semelhança entre o array de entrada e o de saída.
3.4
Mobility Tests
Em sua dissertação, Otoboni [13] realizou uma análise
comparativa entre o sistema de rastreamento corporal ótico
VICON e a solução utilizando BSN. Seus testes se basearam
na execução da tarefa Sit-to-Stand que consiste em um exercí-
cio onde o paciente levanta e senta em uma cadeira sem apoio
das mãos. Para esse comparativo, obteve-se os ângulos go-
niométricos do Quadril (ângulo formado no eixo látero-lateral
pelo abdômen e coxa) e do Joelho (ângulo formado no eixo
látero-lateral pela coxa e perna) obtidos por um conjunto
de 3 BSNs posicionadas no abdômen, coxa e perna (plano
frontal) juntamente com as respectivas rotações obtidas pelo
VICON.
Sendo assim, surgiu-se a demanda de uma aplicação para
captura desses dados com os seguintes requisitos:
∙Aplicação simples, sem RV;
∙possibilidade de conexão de 3 BSNs simultaneamente;
e
∙dados devem ser gravados em um arquivo no formato
CSV (comma-separated Values) contendo as informações
de rotação brutas (Acelerômetro e Giroscópio) e os val-
ores dos ângulos goniométricos do quadril e do joelho.
Buscando atender aos requisitos da demanda, foi criado
o aplicativo BSN Mobility Tests, utilizando todos os assets
criados anteriormente: BSNAsset, Recorder, Recorder Con-
troller, todos funcionando em um único aparelho, uma vez
que não temos necessidade do paciente interagir com a apli-
cação. Além dos assets citados, um gravador de arquivos
CSV foi criado de modo que exportasse os dados da sessão
simultaneamente com a gravação no ReBase.
Finalmente, Otoboni [13] apresenta uma correlação regu-
lar/forte entre as rotações em ambas as soluções, reafirmando
a validade do uso de BSNs na área da saúde.
3.5
Body Tracking
A partir da demanda do BSN Mobility Tests surgiu a
necessidade da criação de uma aplicação que pudesse re-
alizar o rastreamento corporal completo utilizando BSNs.
Proporcionando gravação de dados de acelerômetro, giroscó-
pio e rotação 3D, além de possibilitar a gravação de dados
de rotação de cada articulação do corpo humano (ângulos
goniométricos).
A aplicação permite o usuário utilizar livremente as ar-
ticulações do corpo humano, limitando o uso a grupos de
articulações: superior direito – braço direito, antebraço dire-
ito; superior esquerdo – braço esquerdo, antebraço esquerdo;
inferior direito – coxa direita, perna direita; e inferior es-
querdo – coxa esquerda, perna esquerda.
Os BSNs devem ser posicionadas no corpo humano de
acordo com a Figura 4. Nos braços, os BSNs devem ser
posicionados com o led voltado para cima e com a face do
dispositivo voltada para fora do corpo. Nas pernas, as BSNs
devem ser posicionadas com o led voltado para cima e com a
face do dispositivo voltada para frente do corpo.
(a) Posiciona-
mento
das
BSNs
nos
braços.
(b) Posiciona-
mento
das
BSNs
nas
pernas.
Figure 4: Posicionamento das BSNs no corpo humano.
3.5.1
Gráficos. A seguir, apresentaremos os gráficos gera-
dos a partir dos dados coletados pelo BSN Body Tracking.
Os gráficos foram gerados utilizando o software Excel, e os
dados utilizados foram coletados de um usuário realizando
movimentos de flexão e extensão dos membros superiores e
inferiores.
3.5.2
Rosca direta. A rosca direta é um exercício de muscu-
lação que trabalha os músculos do bíceps braquial. O movi-
mento consiste em flexionar o cotovelo, aproximando a mão
do ombro. O movimento é realizado com os braços estendidos
ao lado do corpo, com os cotovelos flexionados e os punhos
em supinação.
A coleta de dados foi realizada com o usuário realizando
um total de 10 repetições do exercício com o braço direito
(Figura 5a) e 10 repetições do exercício com o braço esquerdo
(Figura 5b).
Nos gráficos da Figura 5 é possível observar que os ân-
gulos goniométricos do cotovelo diminui conforme o usuário
realiza a flexão do cotovelo, e aumenta conforme o usuário
realiza a extensão do cotovelo, variando entre 180º e 90º,
aproximadamente.
Os gráficos da Figura 6 representam os dados de acel-
erômetro coletados durante a execução do exercício. É pos-
sível observar que os dados de acelerômetro do braço direito
e do braço esquerdo são semelhantes, assim como os dados de
Um framework de rastreamento corporal para reabilitação neuromotora com suporte a aplicativos multimídia
WebMedia’2024, Juiz de Fora, Brazil
(a) Rosca direta com o braço direito.
(b) Rosca direta com o braço esquerdo.
Figure 5: Gráficos goniométricos da rosca direta.
acelerômetro do antebraço direito e do antebraço esquerdo.
Os acelerômetros de ambos antebraços apresentam valores
mais altos que os acelerômetros dos braços, pois os antebraços
executaram um movimento de rotação durante a execução
do exercício, enquanto os braços permaneceram estáticos.
3.5.3
Marcha estacionária. A marcha estacionária é um exer-
cício que consiste em simular a marcha sem sair do lugar. O
movimento é realizado suspendendo o joelho até que fique
alinhado com o quadril, e em seguida voltando a posição
inicial.
A coleta de dados foi realizada com o usuário realizando
um total de 10 repetições do exercício com a perna direita
7a e 10 repetições do exercício com a perna esquerda 7b.
Nos gráficos da Figura 7 é possível observar que os ângulos
goniométricos do joelho e do quadril diminuem conforme
o usuário realiza a flexão do joelho, e aumenta conforme o
usuário realiza a extensão do joelho, variando entre 180º e
90º, aproximadamente.
Os gráficos da Figura 8 representam os dados de acel-
erômetro coletados durante a execução do exercício. É pos-
sível observar que os dados de acelerômetro da perna direita
e da perna esquerda são semelhantes, assim como os dados
de acelerômetro da canela direita e da canela esquerda. Os
acelerômetros de ambas as pernas fazem uma troca de eixo,
representando uma rotação do dispositivo. Em contrapartida,
os acelerômetros das canelas não apresentam rotação, porém
(a) Acelerômetro do braço direito
(b) Acelerômetro do braço esquerdo
(c) Acelerômetro do antebraço direito
(d) Acelerômetro do antebraço esquerdo
Figure 6: Gráficos de acelerômetro da rosca direta
apresentaram variações nos eixos Y e Z, causados pelo movi-
mento de sobe e desce da canela.
WebMedia’2024, Juiz de Fora, Brazil
Ribeiro et al.
(a) Marcha estacionária com a perna direita
(b) Marcha estacionária com a perna esquerda
Figure 7: Gráficos da marcha estacionária
CONCLUSÕES E TRABALHOS FUTUROS
Com o crescimento da RV presente nas casas e consultórios
médicos, ela se mostra um excelente incentivo para o exercício
físico e ajuda na reabilitação de pacientes com dificuldades
neuromotoras causadas por várias patologias (como o aci-
dente vascular cerebral). A inevitabilidade de criar inúmeras
aplicações para uso específico se torna uma grande possi-
bilidade. Entretanto, embora os óculos de RV facilitem e
tornem a imersão mais acessível, um método de interação
natural ainda é visto como um desafio no desenvolvimento
de aplicações de RV.
A necessidade de criar um método de interação natural
que seja suficientemente genérico para funcionar em várias
aplicações de RV e que ofereça espaço para a inserção de
particularidades de cada projeto tem governado este trabalho
e incentivado a criação do BSNAsset.
Propusemos e desenvolvemos um asset que nos permite
realizar a conexão de múltiplos dispositivos, rastrear o corpo
humano e mover um avatar virtual. A solução desenvolvida
é fácil de importar e usar em qualquer projeto da Unity.
Como mostramos, é possível gerar aplicações de rastreamento
corporal completo, interagindo com membros superiores e
inferiores.
AGRADECIMENTOS
Os autores agradecem o financiamento em parte pela Co-
ordenação de Aperfeiçoamento de Pessoal de Nível Superior -
(a) Acelerômetro da perna direita
(b) Acelerômetro da perna esquerda
(c) Acelerômetro da canela direita
(d) Acelerômetro da canela esquerda
Figure 8: Gráficos de acelerômetro da marcha estacionária
Brasil (CAPES) - Código de Financiamento 001, Conselho
Nacional de Desenvolvimento Científico e Tecnológico (CNPq)
e a Fundação de Amparo à Pesquisa do Estado de Minas
Um framework de rastreamento corporal para reabilitação neuromotora com suporte a aplicativos multimídia
WebMedia’2024, Juiz de Fora, Brazil
Gerais (FAPEMIG). Também agradecemos à Fundação de
Amparo à Pesquisa e Inovação do Espírito Santo (FAPES) pe-
los recursos disponibilizados através dos projetos PROAPEM
(368/2022 - P: 2022-NGKM5) e PDPG (129/2021 - P: 2021-
GL60J), fundamentais para a realização deste trabalho.