Geração automática de SDK em ES6 para APIs do Ginga CCWS
Raphael Abreu
raphael.abreu@midiacom.uff.br
Laboratorio MídiaCom
Universidade Federal Fluminense
Niterói, Brasil
Joel A. Ferreira dos Santos
jsantos@eic.cefet-rj.br
CEFET/RJ
Rio de Janeiro, Brasil
Débora C. Muchaluat-Saade
debora@midiacom.uff.br
Laboratorio MídiaCom
Universidade Federal Fluminense
Niterói, Brasil
WTVDI’2024, Juiz de Fora/MG, Brazil
Raphael Abreu, Joel A. Ferreira dos Santos, and Débora C. Muchaluat-Saade
Além dos trabalhos acadêmicos, diversas iniciativas governamen-
tais têm adotado o OpenAPI como padrão para a descrição de suas
APIs. No Brasil, o Portal Brasileiro de Transparência1 utiliza o Ope-
nAPI para documentar e disponibilizar seus serviços, facilitando o
acesso e a integração com dados públicos.
A disponibilização de especificações OpenAPI para serviços gov-
ernamentais e padrões tecnológicos, como a norma Ginga CCWS,
representa um passo importante para a comunidade de desenvolve-
dores. Essa prática promove a transparência, a interoperabilidade e a
inovação, facilitando a criação de aplicações e serviços que utilizam
esses recursos. A geração de SDKs a partir dessas especificações,
como o SDK JavaScript apresentado neste trabalho, simplifica ainda
mais o processo de desenvolvimento, permitindo que os desenvolve-
dores se concentrem na lógica de suas aplicações e contribuam para
um ecossistema mais rico e diversificado.
ESPECIFICAÇÃO OPENAPI DO GINGA
CCWS DA TV 2.5
Como primeira contribuição deste trabalho foi feita uma especifi-
cação OpenAPI para a norma Ginga CCWS [2] da TV 2.5. Ela de-
screve os endpoints, métodos, parâmetros, tipos de dados e respostas
esperadas da API. Ela serve como base para a geração automática do
SDK e garante a interoperabilidade entre diferentes implementações.
A especificação está disponível em formato YAML e pode ser visual-
izada em https://drive.google.com/file/d/1Bb0UV41ysQXhyEurePsOEaDl3VsvC_
Uc/view?usp=sharing testada utilizando ferramentas como o Swag-
ger Editor2.
O trecho de código na Figura 1 descreve um endpoint na API
Ginga CCWS: o /𝑑𝑡𝑣/𝑎𝑢𝑡ℎ𝑜𝑟𝑖𝑧𝑒, acessado via método GET. Ele serve
para solicitar o estado de autorização de um cliente, identificado pelo
parâmetro obrigatório 𝑐𝑙𝑖𝑒𝑛𝑡𝑖𝑑. Adicionalmente, o 𝑑𝑖𝑠𝑝𝑙𝑎𝑦−𝑛𝑎𝑚𝑒
é usado para apresentar o nome do cliente ao usuário durante o
processo de autorização. Parâmetros opcionais como 𝑝𝑚, 𝑘𝑥𝑝e
𝑘𝑒𝑦permitem lidar com diferentes métodos de pareamento e segu-
rança para clientes não locais. A especificação detalha as possíveis
respostas, incluindo sucesso (código 200) com exemplos de dife-
rentes cenários de acesso, e erro “não encontrado” (código 404) com
referências a exemplos de erros específicos.
De posse de uma da especificação OpenAPI, é possível gerar
documentação interativa e de fácil navegação, como a ilustrada
na Figura 2. Essa documentação permite que desenvolvedores ex-
plorem os endpoints da API, seus parâmetros e as respostas esper-
adas, facilitando a compreensão e o uso da API. Adicionalmente, a
especificação OpenAPI pode ser utilizada para gerar automatica-
mente testes que validam o comportamento da API, garantindo sua
qualidade e confiabilidade.
Ao clicar em um endpoint específico, é possível visualizar uma
descrição detalhada da rota, incluindo os parâmetros necessários,
exemplos de requisições e respostas, e até mesmo a possibilidade de
testar a rota diretamente na documentação. O endpoint /𝑑𝑡𝑣/𝑎𝑢𝑡ℎ𝑜𝑟𝑖𝑧𝑒
pode ser visualizado na Figura 3 agilizando o processo de desen-
volvimento e integração. Adicionalmente, a especificação OpenAPI
pode ser utilizada para gerar automaticamente testes que validam o
comportamento da API, garantindo sua qualidade e confiabilidade.
1https://api.portaldatransparencia.gov.br
2https://editor.swagger.io/
Figure 1: Exemplo especificação OpenAPI para a rota de au-
torização de clientes.
Figure 2: Exemplo de visualização de lista de APIs OpenAPI.
É importante ressaltar que a especificação OpenAPI permite a
flexibilidade na definição do host da API. Ao utilizar o SDK, o de-
senvolvedor poderá configurar o host da API de acordo com suas
Geração automática de SDK em ES6 para APIs do Ginga CCWS
WTVDI’2024, Juiz de Fora/MG, Brazil
Figure 3: Exemplo de visualização do endpoint /𝑑𝑡𝑣/𝑎𝑢𝑡ℎ𝑜𝑟𝑖𝑧𝑒
na interface gráfica.
necessidades, seja em um ambiente de desenvolvimento, homolo-
gação ou produção. Essa flexibilidade é fundamental para garantir
a adaptabilidade do SDK a diferentes cenários e infraestruturas.
GERADOR DE SDK CCWS
O gerador de SDK é um script Node.js que utiliza a especificação
OpenAPI do Ginga CCWS como entrada e gera automaticamente
o código JavaScript do SDK. Ele automatiza a criação de méto-
dos para cada endpoint da API, simplificando o uso dos serviços
Ginga CCWS. O código do gerador realiza as seguintes etapas: lê
o arquivo JSON da especificação OpenAPI da Ginga CCWS 2.5,
analisa-o para identificar os endpoints, métodos, parâmetros e
respostas da API, gera o código JavaScript do SDK com um ob-
jeto API contendo métodos para cada endpoint, e salva o código
em um arquivo sdk.js. A classe FetchWrapper encapsula a lógica
de comunicação HTTP usando a função fetch do JavaScript. O
gerador de SDK encontra-se em https://drive.google.com/file/d/
1XpBi6iEQU3cQAWF5ZCnvIwX0jObSWojR/view?usp=sharing
4.1
Usando o SDK gerado
O SDK gerado oferece uma API onde cada endpoint é representado
por um método com parâmetros correspondentes à especificação
OpenAPI. A Listagem 1 demonstra um exemplo de uso, importando
o SDK e realizando uma chamada à função dtvAuthorizeGet. Note
que é possível customizar o host da API, caso necessário.
Listing 1: Exemplo de uso do SDK gerado
import API from
' . / sdk . js ' ;
API . host =
' < ip >: < porta > ' ;
/ /
opcional
await API . dtvAuthorizeGet ( {
c l i e n t i d :
' xpto ' ,
displayName :
' xpto ' ,
pm:
' qrcode '
} )
. then ( ( value ) => {
console . log ( value ) ;
} )
. catch ( e r r o r => {
console . log ( e r r o r ) ;
} ) ;
Além disso, o gerador permite customizar a especificação Ope-
nAPI antes da geração do SDK, possibilitando a adaptação da API
às necessidades específicas do projeto, adicionando ou removendo
funcionalidades conforme necessário.
CONCLUSÃO
Este artigo apresentou um gerador de SDK em JavaScript para a
norma Ginga CCWS. Foi criada a especificação OpenAPI da norma
referente ao Ginga CCWS da TV 2.5 para usar como base do gerador.
O SDK gerado tem potencial de simplificar o desenvolvimento de
aplicações interativas para a TV Digital, promovendo a interoper-
abilidade e a adaptabilidade a futuras versões da norma.
A utilização do OpenAPI e do JavaScript permite que os desen-
volvedores aproveitem as vantagens de uma linguagem moderna
e amplamente utilizada, além de garantir a aderência aos padrões
da indústria e a facilidade de integração com outras ferramentas e
plataformas.
WTVDI’2024, Juiz de Fora/MG, Brazil
Raphael Abreu, Joel A. Ferreira dos Santos, and Débora C. Muchaluat-Saade
Como trabalho futuro pretende-se expandir o gerador de SDK
para outras linguagens de programação, como Python. Além disso,
com a evolução da norma Ginga para a TV 3.0, planeja-se atualizar
a especificação OpenAPI e o gerador de SDK para suportar as novas
funcionalidades e serviços que serão introduzidos.
Por fim, um passo crucial será a realização de testes práticos do
SDK com desenvolvedores de aplicações para a TV Digital, a fim
de coletar feedback sobre a usabilidade, a eficiência e a capacidade
do SDK de atender às necessidades reais do desenvolvimento de
aplicações Ginga.
